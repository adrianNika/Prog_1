
TIMER-0_CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000076d  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e8  00000000  00000000  0000100d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c0  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001730  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_Timer>:
}

/*NO select prescaler => NO CLOCK*/
void Timer_Stop(void)
{
	TCCR0B |= TIMER_STOP;
  80:	14 bc       	out	0x24, r1	; 36
  82:	84 b5       	in	r24, 0x24	; 36
  84:	82 60       	ori	r24, 0x02	; 2
  86:	84 bd       	out	0x24, r24	; 36
  88:	15 bc       	out	0x25, r1	; 37
  8a:	85 b5       	in	r24, 0x25	; 37
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	85 bd       	out	0x25, r24	; 37
  90:	ee e6       	ldi	r30, 0x6E	; 110
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
  96:	80 81       	ld	r24, Z
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	80 83       	st	Z, r24
  9c:	8f e9       	ldi	r24, 0x9F	; 159
  9e:	87 bd       	out	0x27, r24	; 39
  a0:	08 95       	ret

000000a2 <Timer_Start>:
  a2:	85 b5       	in	r24, 0x25	; 37
  a4:	85 bd       	out	0x25, r24	; 37
  a6:	08 95       	ret

000000a8 <__vector_14>:
}

/*interuption par comparaison avec OCR0A et le compteur*/
ISR(TIMER0_COMPA_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	/*toggle de la sortie PD0*/
	PORTD ^= 0x01;
  b6:	9b b1       	in	r25, 0x0b	; 11
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	89 27       	eor	r24, r25
  bc:	8b b9       	out	0x0b, r24	; 11
}
  be:	9f 91       	pop	r25
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <main>:


int main(void)
{
	DDRD = 0xFF; /*initialisation en sortie du PORTD*/
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	8a b9       	out	0x0a, r24	; 10
	Init_Timer(); /*initialiser mon timer*/
  d0:	0e 94 40 00 	call	0x80	; 0x80 <Init_Timer>
	Timer_Start();
  d4:	0e 94 51 00 	call	0xa2	; 0xa2 <Timer_Start>
	sei(); /*innitialiser les interuptions*/
  d8:	78 94       	sei
	
	while (1)
	{
		/*toggle de la sortie PD1*/
		PORTD ^= 0x02;
  da:	9b b1       	in	r25, 0x0b	; 11
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	89 27       	eor	r24, r25
  e0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x1c>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x26>
  f2:	00 00       	nop
  f4:	f2 cf       	rjmp	.-28     	; 0xda <main+0xe>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
