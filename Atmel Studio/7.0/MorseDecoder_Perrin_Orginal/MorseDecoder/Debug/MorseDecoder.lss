
MorseDecoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ce  00800100  000005d4  00000668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c3  008001ce  008001ce  00000736  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001214  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8b  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0f  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  0000303c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008cf  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bc2  00000000  00000000  00003c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000047fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_10>
  2c:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_18>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 3c       	cpi	r26, 0xCE	; 206
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae ec       	ldi	r26, 0xCE	; 206
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 39       	cpi	r26, 0x91	; 145
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 17 02 	call	0x42e	; 0x42e <main>
  9e:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ac:	88 eb       	ldi	r24, 0xB8	; 184
  ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  bc:	8f ec       	ldi	r24, 0xCF	; 207
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c2:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <RX_Tail>
  c6:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <RX_Head>
  ca:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <TX_Tail>
  ce:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <TX_Head>
  d2:	08 95       	ret

000000d4 <__vector_19>:
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
  e8:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <TX_Tail>
  ec:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <TX_Head>
  f0:	98 17       	cp	r25, r24
  f2:	d9 f0       	breq	.+54     	; 0x12a <__vector_19+0x56>
  f4:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <TX_Tail>
  f8:	9f 5f       	subi	r25, 0xFF	; 255
  fa:	89 2f       	mov	r24, r25
  fc:	86 95       	lsr	r24
  fe:	2b ee       	ldi	r18, 0xEB	; 235
 100:	82 9f       	mul	r24, r18
 102:	81 2d       	mov	r24, r1
 104:	11 24       	eor	r1, r1
 106:	82 95       	swap	r24
 108:	86 95       	lsr	r24
 10a:	87 70       	andi	r24, 0x07	; 7
 10c:	26 e4       	ldi	r18, 0x46	; 70
 10e:	82 9f       	mul	r24, r18
 110:	90 19       	sub	r25, r0
 112:	11 24       	eor	r1, r1
 114:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <TX_Tail>
 118:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <TX_Tail>
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ec 52       	subi	r30, 0x2C	; 44
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	80 81       	ld	r24, Z
 124:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 128:	05 c0       	rjmp	.+10     	; 0x134 <__vector_19+0x60>
 12a:	e1 ec       	ldi	r30, 0xC1	; 193
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 7d       	andi	r24, 0xDF	; 223
 132:	80 83       	st	Z, r24
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <UART_PutChar>:
 148:	20 91 d1 01 	lds	r18, 0x01D1	; 0x8001d1 <TX_Head>
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	92 2f       	mov	r25, r18
 150:	96 95       	lsr	r25
 152:	3b ee       	ldi	r19, 0xEB	; 235
 154:	93 9f       	mul	r25, r19
 156:	91 2d       	mov	r25, r1
 158:	11 24       	eor	r1, r1
 15a:	92 95       	swap	r25
 15c:	96 95       	lsr	r25
 15e:	97 70       	andi	r25, 0x07	; 7
 160:	36 e4       	ldi	r19, 0x46	; 70
 162:	93 9f       	mul	r25, r19
 164:	20 19       	sub	r18, r0
 166:	11 24       	eor	r1, r1
 168:	92 2f       	mov	r25, r18
 16a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <TX_Tail>
 16e:	92 13       	cpse	r25, r18
 170:	06 c0       	rjmp	.+12     	; 0x17e <UART_PutChar+0x36>
 172:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <ErrorUart>
 176:	84 60       	ori	r24, 0x04	; 4
 178:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <ErrorUart>
 17c:	08 95       	ret
 17e:	e9 2f       	mov	r30, r25
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ec 52       	subi	r30, 0x2C	; 44
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	80 83       	st	Z, r24
 188:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <TX_Head>
 18c:	e1 ec       	ldi	r30, 0xC1	; 193
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	80 62       	ori	r24, 0x20	; 32
 194:	80 83       	st	Z, r24
 196:	08 95       	ret

00000198 <Uart_SetELOEndCharDetected>:
 198:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <__data_end>
 19c:	08 95       	ret

0000019e <__vector_18>:
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c4:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <RX_Head>
 1c8:	9f 5f       	subi	r25, 0xFF	; 255
 1ca:	89 2f       	mov	r24, r25
 1cc:	86 95       	lsr	r24
 1ce:	eb ee       	ldi	r30, 0xEB	; 235
 1d0:	8e 9f       	mul	r24, r30
 1d2:	e1 2d       	mov	r30, r1
 1d4:	11 24       	eor	r1, r1
 1d6:	e2 95       	swap	r30
 1d8:	e6 95       	lsr	r30
 1da:	e7 70       	andi	r30, 0x07	; 7
 1dc:	86 e4       	ldi	r24, 0x46	; 70
 1de:	e8 9f       	mul	r30, r24
 1e0:	90 19       	sub	r25, r0
 1e2:	11 24       	eor	r1, r1
 1e4:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <RX_Tail>
 1e8:	98 13       	cpse	r25, r24
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <__vector_18+0x5a>
 1ec:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <ErrorUart>
 1f0:	82 60       	ori	r24, 0x02	; 2
 1f2:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <ErrorUart>
 1f6:	0c c0       	rjmp	.+24     	; 0x210 <__vector_18+0x72>
 1f8:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <RX_Head>
 1fc:	e9 2f       	mov	r30, r25
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	e6 5e       	subi	r30, 0xE6	; 230
 202:	fd 4f       	sbci	r31, 0xFD	; 253
 204:	20 83       	st	Z, r18
 206:	2a 32       	cpi	r18, 0x2A	; 42
 208:	19 f4       	brne	.+6      	; 0x210 <__vector_18+0x72>
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 cc 00 	call	0x198	; 0x198 <Uart_SetELOEndCharDetected>
 210:	ff 91       	pop	r31
 212:	ef 91       	pop	r30
 214:	bf 91       	pop	r27
 216:	af 91       	pop	r26
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	7f 91       	pop	r23
 21e:	6f 91       	pop	r22
 220:	5f 91       	pop	r21
 222:	4f 91       	pop	r20
 224:	3f 91       	pop	r19
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_11>:

/* Global variable containing TOP value (memory) */
uint16_t actualTop = 0xFFFF;

ISR(TIMER1_COMPA_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
		a - 1.5 dot duration passed : end of char detected
		b - 4	dot duration passed : space detected
		c - overflow without flag : Only a rising edge detected */ 
	
	/* checks if falling edge detected */ 
	PORTD |= 0x40;
 244:	8b b1       	in	r24, 0x0b	; 11
 246:	80 64       	ori	r24, 0x40	; 64
 248:	8b b9       	out	0x0b, r24	; 11
	cli();
 24a:	f8 94       	cli

	
	if(flagCheckEndChar != 0)
 24c:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <flagCheckEndChar>
 250:	88 23       	and	r24, r24
 252:	e1 f0       	breq	.+56     	; 0x28c <__vector_11+0x5a>
	{
		/* clears flag */
		flagCheckEndChar = 0;
 254:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <flagCheckEndChar>
		flagCharReading = 0;
 258:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <flagCharReading>
		captureIndex = 0;
 25c:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <captureIndex>
		
		/* Sets for another rising edge detection : 2.5 dot  */
		actualTop = WAIT_SPACE;
 260:	84 e3       	ldi	r24, 0x34	; 52
 262:	9c e0       	ldi	r25, 0x0C	; 12
 264:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 268:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		OCR1A = actualTop;
 26c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 270:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		TIFR1 |= ((1 << TOV1) | (1 << OCF1A));
 274:	86 b3       	in	r24, 0x16	; 22
 276:	83 60       	ori	r24, 0x03	; 3
 278:	86 bb       	out	0x16, r24	; 22
		flagCheckSpace = 0x01;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <flagCheckSpace>
		
		/* flag decoder action  */
		flagEndOfMorseChar |= 0x01;		
 280:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <flagEndOfMorseChar>
 284:	81 60       	ori	r24, 0x01	; 1
 286:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <flagEndOfMorseChar>
 28a:	1b c0       	rjmp	.+54     	; 0x2c2 <__vector_11+0x90>
	}
	else
	{
		/* check if space checking  */
		if (flagCheckSpace != 0)
 28c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <flagCheckSpace>
 290:	88 23       	and	r24, r24
 292:	b9 f0       	breq	.+46     	; 0x2c2 <__vector_11+0x90>
		{
			/* 4 dot duration passed --> Stop Timer and rise 
				flag for sending a space char */
			flagCheckSpace = 0; 
 294:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <flagCheckSpace>
			flagSendSpaceChar =1; 
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <flagSendSpaceChar>
			TCCR1B &= ~(0x05);
 29e:	e1 e8       	ldi	r30, 0x81	; 129
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	8a 7f       	andi	r24, 0xFA	; 250
 2a6:	80 83       	st	Z, r24
			TCNT1 = 0x0000;
 2a8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 2ac:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			OCR1A = 0xFFFF;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	9f ef       	ldi	r25, 0xFF	; 255
 2b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			TIFR1 |= ((1 << TOV1) | (1 << OCF1A));
 2bc:	86 b3       	in	r24, 0x16	; 22
 2be:	83 60       	ori	r24, 0x03	; 3
 2c0:	86 bb       	out	0x16, r24	; 22
		}
	}
	
	sei();
 2c2:	78 94       	sei
	PORTD &= ~0x40;
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	8f 7b       	andi	r24, 0xBF	; 191
 2c8:	8b b9       	out	0x0b, r24	; 11
}
 2ca:	ff 91       	pop	r31
 2cc:	ef 91       	pop	r30
 2ce:	9f 91       	pop	r25
 2d0:	8f 91       	pop	r24
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	3f 93       	push	r19
 2ea:	4f 93       	push	r20
 2ec:	5f 93       	push	r21
 2ee:	6f 93       	push	r22
 2f0:	7f 93       	push	r23
 2f2:	8f 93       	push	r24
 2f4:	9f 93       	push	r25
 2f6:	ef 93       	push	r30
 2f8:	ff 93       	push	r31
	PORTD |= 0x80;
 2fa:	8b b1       	in	r24, 0x0b	; 11
 2fc:	80 68       	ori	r24, 0x80	; 128
 2fe:	8b b9       	out	0x0b, r24	; 11
	
	/* Deactivate  re-entering in the interrupt */
	cli();
 300:	f8 94       	cli
	
	/* Save Capture value */
	tempCaptureValue = ICR1;
 302:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 306:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 30a:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <tempCaptureValue+0x1>
 30e:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <tempCaptureValue>

	
	/*  */
	switch (stateMorseDecoder)
 312:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <stateMorseDecoder>
 316:	22 23       	and	r18, r18
 318:	19 f0       	breq	.+6      	; 0x320 <__vector_10+0x44>
 31a:	21 30       	cpi	r18, 0x01	; 1
 31c:	d1 f1       	breq	.+116    	; 0x392 <__vector_10+0xb6>
 31e:	54 c0       	rjmp	.+168    	; 0x3c8 <__vector_10+0xec>
	{
		case STATE_WAIT_START_SIGN: 
			
			if (flagCheckEndChar == 0x00)
 320:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <flagCheckEndChar>
 324:	81 11       	cpse	r24, r1
 326:	22 c0       	rjmp	.+68     	; 0x36c <__vector_10+0x90>
			{
				/* Start capturing a new char --> reset timer */
				if (flagCharReading == 0)
 328:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <flagCharReading>
 32c:	81 11       	cpse	r24, r1
 32e:	2d c0       	rjmp	.+90     	; 0x38a <__vector_10+0xae>
				{
					flagCharReading |= 0x01;
 330:	81 60       	ori	r24, 0x01	; 1
 332:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <flagCharReading>
					actualTop = 0xFFFF;
 336:	8f ef       	ldi	r24, 0xFF	; 255
 338:	9f ef       	ldi	r25, 0xFF	; 255
 33a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					OCR1A = actualTop;
 342:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 346:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					TCNT1 = 0x0000;
 34a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 34e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
					tempCaptureValue = 0;
 352:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <tempCaptureValue+0x1>
 356:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <tempCaptureValue>
				
					/* Clears evt. flags */
					TCCR1B |= 0x05;
 35a:	e1 e8       	ldi	r30, 0x81	; 129
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	85 60       	ori	r24, 0x05	; 5
 362:	80 83       	st	Z, r24
					TIFR1 |= ((1 << TOV1) | (1 << OCF1A));
 364:	86 b3       	in	r24, 0x16	; 22
 366:	83 60       	ori	r24, 0x03	; 3
 368:	86 bb       	out	0x16, r24	; 22
 36a:	0f c0       	rjmp	.+30     	; 0x38a <__vector_10+0xae>
			{
				/* not a first char detection. If PC is here, 
				we continue to measure signs, either a dot or 
				a dash --> OCR value MUST be MAX */
				
				actualTop = 0xFFFF;
 36c:	8f ef       	ldi	r24, 0xFF	; 255
 36e:	9f ef       	ldi	r25, 0xFF	; 255
 370:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 374:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				OCR1A = actualTop; 
 378:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 37c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				/* Clears evt. flags */
				TIFR1 |= ((1 << TOV1) | (1 << OCF1A));
 380:	86 b3       	in	r24, 0x16	; 22
 382:	83 60       	ori	r24, 0x03	; 3
 384:	86 bb       	out	0x16, r24	; 22
				
				flagCheckEndChar = 0;
 386:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <flagCheckEndChar>
			}
					
			stateMorseDecoder = STATE_WAIT_END_SIGN;		
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <stateMorseDecoder>
		break;
 390:	1b c0       	rjmp	.+54     	; 0x3c8 <__vector_10+0xec>
		
		case STATE_WAIT_END_SIGN:
			/* If arrived here, sign duration in computable.
			The trick is to set a duration  */
			
			if (((uint32_t) tempCaptureValue + WAIT_END_CHAR) > 0xFFFF)
 392:	ac 01       	movw	r20, r24
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	4e 5a       	subi	r20, 0xAE	; 174
 39a:	58 4f       	sbci	r21, 0xF8	; 248
 39c:	6f 4f       	sbci	r22, 0xFF	; 255
 39e:	7f 4f       	sbci	r23, 0xFF	; 255
 3a0:	41 15       	cp	r20, r1
 3a2:	51 05       	cpc	r21, r1
 3a4:	61 40       	sbci	r22, 0x01	; 1
 3a6:	71 05       	cpc	r23, r1
 3a8:	68 f4       	brcc	.+26     	; 0x3c4 <__vector_10+0xe8>
				/* error, char is too long */
				
			}
			else
			{
				actualTop = tempCaptureValue + WAIT_END_CHAR;
 3aa:	8e 5a       	subi	r24, 0xAE	; 174
 3ac:	98 4f       	sbci	r25, 0xF8	; 248
 3ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 3b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				OCR1A = actualTop;
 3b6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ba:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				flagCheckEndChar = 0x01;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <flagCheckEndChar>
			}
			
			stateMorseDecoder = STATE_WAIT_START_SIGN;
 3c4:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <stateMorseDecoder>
		default:
		break;
	}
	
	/* Save in table */
	captureTable[captureIndex] = tempCaptureValue;
 3c8:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <captureIndex>
 3cc:	e8 2f       	mov	r30, r24
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	e0 5a       	subi	r30, 0xA0	; 160
 3d6:	fd 4f       	sbci	r31, 0xFD	; 253
 3d8:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <tempCaptureValue>
 3dc:	30 91 89 02 	lds	r19, 0x0289	; 0x800289 <tempCaptureValue+0x1>
 3e0:	31 83       	std	Z+1, r19	; 0x01
 3e2:	20 83       	st	Z, r18
	captureIndex ++;
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <captureIndex>
	
	/* Change edge for next measurement ! */
	TCCR1B ^= (1 << ICES1);
 3ea:	e1 e8       	ldi	r30, 0x81	; 129
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	90 81       	ld	r25, Z
 3f0:	80 e4       	ldi	r24, 0x40	; 64
 3f2:	89 27       	eor	r24, r25
 3f4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f6:	8f ed       	ldi	r24, 0xDF	; 223
 3f8:	9e e2       	ldi	r25, 0x2E	; 46
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <__vector_10+0x11e>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
 400:	00 00       	nop
		
	/* Debouncing, not optimal, but okay */
	_delay_ms(3);
	TIFR1 |= (1 << ICF1);
 402:	86 b3       	in	r24, 0x16	; 22
 404:	80 62       	ori	r24, 0x20	; 32
 406:	86 bb       	out	0x16, r24	; 22
	sei();
 408:	78 94       	sei
	PORTD &= ~0x80;
 40a:	8b b1       	in	r24, 0x0b	; 11
 40c:	8f 77       	andi	r24, 0x7F	; 127
 40e:	8b b9       	out	0x0b, r24	; 11
}
 410:	ff 91       	pop	r31
 412:	ef 91       	pop	r30
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <main>:



int main(void)
{	
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	28 97       	sbiw	r28, 0x08	; 8
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 442:	83 b7       	in	r24, 0x33	; 51
 444:	81 7f       	andi	r24, 0xF1	; 241
 446:	84 60       	ori	r24, 0x04	; 4
 448:	83 bf       	out	0x33, r24	; 51
	uint8_t y = 0;
	uint16_t signDuration = 0x0000;
	uint16_t timeSleep = 0;
	
    // Initialization of UART
    UART_Init();
 44a:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>
    	
	/*TIMER 1 CONFIG */
	TCCR1A = 0x00;
 44e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
		Inputcapture enables with filter (6..7) = 11
		bit 5 reserved							= 0
		MODE CTC (4..3)							= 01
		Prescaler 1024(2..0)					= 000
	*/
	TCCR1B = 0x00;
 452:	e1 e8       	ldi	r30, 0x81	; 129
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	10 82       	st	Z, r1
	TCCR1B |= 0b11001000;
 458:	80 81       	ld	r24, Z
 45a:	88 6c       	ori	r24, 0xC8	; 200
 45c:	80 83       	st	Z, r24
	
	/* The two interrupts activated */
	OCR1A = 0xFFFF;
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	9f ef       	ldi	r25, 0xFF	; 255
 462:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 466:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TIMSK1 = 0x00;
 46a:	ef e6       	ldi	r30, 0x6F	; 111
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	10 82       	st	Z, r1
	TIMSK1 |= ((1 << OCIE1A) | (1 << ICIE1));
 470:	80 81       	ld	r24, Z
 472:	82 62       	ori	r24, 0x22	; 34
 474:	80 83       	st	Z, r24
	
	DDRD |=0xC0;
 476:	8a b1       	in	r24, 0x0a	; 10
 478:	80 6c       	ori	r24, 0xC0	; 192
 47a:	8a b9       	out	0x0a, r24	; 10
	
    // Permits interruptions
    sei();
 47c:	78 94       	sei
	char MorseCharToDecode[8];
	uint8_t flagCharFound;
	uint8_t i = 0;
	uint8_t y = 0;
	uint16_t signDuration = 0x0000;
	uint16_t timeSleep = 0;
 47e:	00 e0       	ldi	r16, 0x00	; 0
 480:	10 e0       	ldi	r17, 0x00	; 0
    // Permits interruptions
    sei();
	
    while (1) 
    {
		timeSleep++;
 482:	0f 5f       	subi	r16, 0xFF	; 255
 484:	1f 4f       	sbci	r17, 0xFF	; 255
		if (flagEndOfMorseChar != 0)
 486:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <flagEndOfMorseChar>
 48a:	88 23       	and	r24, r24
 48c:	09 f4       	brne	.+2      	; 0x490 <main+0x62>
 48e:	83 c0       	rjmp	.+262    	; 0x596 <main+0x168>
		{			
			timeSleep = 0;	
			flagEndOfMorseChar = 0; 
 490:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <flagEndOfMorseChar>
			
			/*Decoding morse code here*/
			y=0;
 494:	40 e0       	ldi	r20, 0x00	; 0
			for(i = 1; captureTable[i] != 0; i+=2 )
 496:	51 e0       	ldi	r21, 0x01	; 1
 498:	31 c0       	rjmp	.+98     	; 0x4fc <main+0xce>
			{
				signDuration = (captureTable[i] - captureTable[(i-1)]);
 49a:	fc 01       	movw	r30, r24
 49c:	31 97       	sbiw	r30, 0x01	; 1
 49e:	ee 0f       	add	r30, r30
 4a0:	ff 1f       	adc	r31, r31
 4a2:	e0 5a       	subi	r30, 0xA0	; 160
 4a4:	fd 4f       	sbci	r31, 0xFD	; 253
 4a6:	80 81       	ld	r24, Z
 4a8:	91 81       	ldd	r25, Z+1	; 0x01
 4aa:	28 1b       	sub	r18, r24
 4ac:	39 0b       	sbc	r19, r25
				if ((signDuration > DOT_DURATION_MIN) && ((signDuration < DOT_DURATION_MAX)))
 4ae:	c9 01       	movw	r24, r18
 4b0:	81 52       	subi	r24, 0x21	; 33
 4b2:	93 40       	sbci	r25, 0x03	; 3
 4b4:	83 38       	cpi	r24, 0x83	; 131
 4b6:	93 40       	sbci	r25, 0x03	; 3
 4b8:	48 f4       	brcc	.+18     	; 0x4cc <main+0x9e>
				{
					MorseCharToDecode[y] = '.';
 4ba:	e1 e0       	ldi	r30, 0x01	; 1
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	ec 0f       	add	r30, r28
 4c0:	fd 1f       	adc	r31, r29
 4c2:	e4 0f       	add	r30, r20
 4c4:	f1 1d       	adc	r31, r1
 4c6:	8e e2       	ldi	r24, 0x2E	; 46
 4c8:	80 83       	st	Z, r24
 4ca:	16 c0       	rjmp	.+44     	; 0x4f8 <main+0xca>
				}
				else
				{
					if ((signDuration > DASH_DURATION_MIN) && ((signDuration < DASH_DURATION_MAX)))
 4cc:	21 56       	subi	r18, 0x61	; 97
 4ce:	39 40       	sbci	r19, 0x09	; 9
 4d0:	2b 38       	cpi	r18, 0x8B	; 139
 4d2:	3a 40       	sbci	r19, 0x0A	; 10
 4d4:	48 f4       	brcc	.+18     	; 0x4e8 <main+0xba>
					{
						MorseCharToDecode[y] = '-';
 4d6:	e1 e0       	ldi	r30, 0x01	; 1
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ec 0f       	add	r30, r28
 4dc:	fd 1f       	adc	r31, r29
 4de:	e4 0f       	add	r30, r20
 4e0:	f1 1d       	adc	r31, r1
 4e2:	8d e2       	ldi	r24, 0x2D	; 45
 4e4:	80 83       	st	Z, r24
 4e6:	08 c0       	rjmp	.+16     	; 0x4f8 <main+0xca>
					}
					else
					{
						MorseCharToDecode[y] = '*';
 4e8:	e1 e0       	ldi	r30, 0x01	; 1
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	ec 0f       	add	r30, r28
 4ee:	fd 1f       	adc	r31, r29
 4f0:	e4 0f       	add	r30, r20
 4f2:	f1 1d       	adc	r31, r1
 4f4:	8a e2       	ldi	r24, 0x2A	; 42
 4f6:	80 83       	st	Z, r24
					}
				}
				y++;
 4f8:	4f 5f       	subi	r20, 0xFF	; 255
			timeSleep = 0;	
			flagEndOfMorseChar = 0; 
			
			/*Decoding morse code here*/
			y=0;
			for(i = 1; captureTable[i] != 0; i+=2 )
 4fa:	5e 5f       	subi	r21, 0xFE	; 254
 4fc:	85 2f       	mov	r24, r21
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	fc 01       	movw	r30, r24
 502:	ee 0f       	add	r30, r30
 504:	ff 1f       	adc	r31, r31
 506:	e0 5a       	subi	r30, 0xA0	; 160
 508:	fd 4f       	sbci	r31, 0xFD	; 253
 50a:	20 81       	ld	r18, Z
 50c:	31 81       	ldd	r19, Z+1	; 0x01
 50e:	21 15       	cp	r18, r1
 510:	31 05       	cpc	r19, r1
 512:	19 f6       	brne	.-122    	; 0x49a <main+0x6c>
						MorseCharToDecode[y] = '*';
					}
				}
				y++;
			}
			y++;
 514:	4f 5f       	subi	r20, 0xFF	; 255
			MorseCharToDecode[y] = '\0';
 516:	e1 e0       	ldi	r30, 0x01	; 1
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	ec 0f       	add	r30, r28
 51c:	fd 1f       	adc	r31, r29
 51e:	e4 0f       	add	r30, r20
 520:	f1 1d       	adc	r31, r1
 522:	10 82       	st	Z, r1
			
			flagCharFound = 0; 
			for (i=0; i < 43; i++)
 524:	10 e0       	ldi	r17, 0x00	; 0
				y++;
			}
			y++;
			MorseCharToDecode[y] = '\0';
			
			flagCharFound = 0; 
 526:	00 e0       	ldi	r16, 0x00	; 0
			for (i=0; i < 43; i++)
 528:	14 c0       	rjmp	.+40     	; 0x552 <main+0x124>
			{
				if (strcmp(MorseCharToDecode, MORSE_TABLE[i]) == 0)
 52a:	e1 2f       	mov	r30, r17
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	ee 0f       	add	r30, r30
 530:	ff 1f       	adc	r31, r31
 532:	ee 5f       	subi	r30, 0xFE	; 254
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	60 81       	ld	r22, Z
 538:	71 81       	ldd	r23, Z+1	; 0x01
 53a:	ce 01       	movw	r24, r28
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	0e 94 df 02 	call	0x5be	; 0x5be <strcmp>
 542:	89 2b       	or	r24, r25
 544:	29 f4       	brne	.+10     	; 0x550 <main+0x122>
				{
					UART_PutChar(i + 0x30);
 546:	80 e3       	ldi	r24, 0x30	; 48
 548:	81 0f       	add	r24, r17
 54a:	0e 94 a4 00 	call	0x148	; 0x148 <UART_PutChar>
					flagCharFound = 1; 
 54e:	01 e0       	ldi	r16, 0x01	; 1
			}
			y++;
			MorseCharToDecode[y] = '\0';
			
			flagCharFound = 0; 
			for (i=0; i < 43; i++)
 550:	1f 5f       	subi	r17, 0xFF	; 255
 552:	1b 32       	cpi	r17, 0x2B	; 43
 554:	50 f3       	brcs	.-44     	; 0x52a <main+0xfc>
					UART_PutChar(i + 0x30);
					flagCharFound = 1; 
				}
			}
			
			if (flagCharFound == 0)
 556:	01 11       	cpse	r16, r1
 558:	03 c0       	rjmp	.+6      	; 0x560 <main+0x132>
			{
				UART_PutChar('*');
 55a:	8a e2       	ldi	r24, 0x2A	; 42
 55c:	0e 94 a4 00 	call	0x148	; 0x148 <UART_PutChar>
				y++;
			}
			y++;
			MorseCharToDecode[y] = '\0';
			
			flagCharFound = 0; 
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	09 c0       	rjmp	.+18     	; 0x576 <main+0x148>
			}
			
			/**/
			for (i = 0; i<20;i++)
			{
				captureTable[i] =0 ;
 564:	e8 2f       	mov	r30, r24
 566:	f0 e0       	ldi	r31, 0x00	; 0
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	e0 5a       	subi	r30, 0xA0	; 160
 56e:	fd 4f       	sbci	r31, 0xFD	; 253
 570:	11 82       	std	Z+1, r1	; 0x01
 572:	10 82       	st	Z, r1
			{
				UART_PutChar('*');
			}
			
			/**/
			for (i = 0; i<20;i++)
 574:	8f 5f       	subi	r24, 0xFF	; 255
 576:	84 31       	cpi	r24, 0x14	; 20
 578:	a8 f3       	brcs	.-22     	; 0x564 <main+0x136>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	08 c0       	rjmp	.+16     	; 0x58e <main+0x160>
				captureTable[i] =0 ;
			}
			
			for (i = 0; i<8;i++)
			{
				MorseCharToDecode[i] =0 ;
 57e:	e1 e0       	ldi	r30, 0x01	; 1
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	ec 0f       	add	r30, r28
 584:	fd 1f       	adc	r31, r29
 586:	e8 0f       	add	r30, r24
 588:	f1 1d       	adc	r31, r1
 58a:	10 82       	st	Z, r1
			for (i = 0; i<20;i++)
			{
				captureTable[i] =0 ;
			}
			
			for (i = 0; i<8;i++)
 58c:	8f 5f       	subi	r24, 0xFF	; 255
 58e:	88 30       	cpi	r24, 0x08	; 8
 590:	b0 f3       	brcs	.-20     	; 0x57e <main+0x150>
    while (1) 
    {
		timeSleep++;
		if (flagEndOfMorseChar != 0)
		{			
			timeSleep = 0;	
 592:	00 e0       	ldi	r16, 0x00	; 0
 594:	10 e0       	ldi	r17, 0x00	; 0
// 				_delay_ms(200);
// 				captureTable[i]=0;
// 			}
		}
		
		if (flagSendSpaceChar != 0)
 596:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <flagSendSpaceChar>
 59a:	88 23       	and	r24, r24
 59c:	29 f0       	breq	.+10     	; 0x5a8 <main+0x17a>
		{
			flagSendSpaceChar = 0;
 59e:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <flagSendSpaceChar>
			UART_PutChar(' ');
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	0e 94 a4 00 	call	0x148	; 0x148 <UART_PutChar>
		}
		
		if (timeSleep >= 40000)
 5a8:	00 34       	cpi	r16, 0x40	; 64
 5aa:	6c e9       	ldi	r22, 0x9C	; 156
 5ac:	16 07       	cpc	r17, r22
 5ae:	10 f0       	brcs	.+4      	; 0x5b4 <main+0x186>
		{
			/*sleep_enable();
			sei();
			sleep_cpu();*/
			
			timeSleep = 0;
 5b0:	00 e0       	ldi	r16, 0x00	; 0
 5b2:	10 e0       	ldi	r17, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b4:	85 e0       	ldi	r24, 0x05	; 5
 5b6:	8a 95       	dec	r24
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <main+0x188>
 5ba:	00 00       	nop
 5bc:	62 cf       	rjmp	.-316    	; 0x482 <main+0x54>

000005be <strcmp>:
 5be:	fb 01       	movw	r30, r22
 5c0:	dc 01       	movw	r26, r24
 5c2:	8d 91       	ld	r24, X+
 5c4:	01 90       	ld	r0, Z+
 5c6:	80 19       	sub	r24, r0
 5c8:	01 10       	cpse	r0, r1
 5ca:	d9 f3       	breq	.-10     	; 0x5c2 <strcmp+0x4>
 5cc:	99 0b       	sbc	r25, r25
 5ce:	08 95       	ret

000005d0 <_exit>:
 5d0:	f8 94       	cli

000005d2 <__stop_program>:
 5d2:	ff cf       	rjmp	.-2      	; 0x5d2 <__stop_program>
