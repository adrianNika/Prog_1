
Encodeur-Morse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000130  00800100  000003a2  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003a2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800230  00800230  00000566  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000598  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fdb  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b9  00000000  00000000  0000168f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000098a  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  000029d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d2  00000000  00000000  00002ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009a1  00000000  00000000  0000347a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003e1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 3c       	cpi	r26, 0xC7	; 199
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 01 	call	0x300	; 0x300 <main>
  9e:	0c 94 cf 01 	jmp	0x39e	; 0x39e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <TX_Tail>
  be:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <TX_Head>
  c2:	98 17       	cp	r25, r24
  c4:	d9 f0       	breq	.+54     	; 0xfc <__vector_19+0x56>
  c6:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <TX_Tail>
  ca:	9f 5f       	subi	r25, 0xFF	; 255
  cc:	89 2f       	mov	r24, r25
  ce:	86 95       	lsr	r24
  d0:	2b ee       	ldi	r18, 0xEB	; 235
  d2:	82 9f       	mul	r24, r18
  d4:	81 2d       	mov	r24, r1
  d6:	11 24       	eor	r1, r1
  d8:	82 95       	swap	r24
  da:	86 95       	lsr	r24
  dc:	87 70       	andi	r24, 0x07	; 7
  de:	26 e4       	ldi	r18, 0x46	; 70
  e0:	82 9f       	mul	r24, r18
  e2:	90 19       	sub	r25, r0
  e4:	11 24       	eor	r1, r1
  e6:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <TX_Tail>
  ea:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <TX_Tail>
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ea 5c       	subi	r30, 0xCA	; 202
  f2:	fd 4f       	sbci	r31, 0xFD	; 253
  f4:	80 81       	ld	r24, Z
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <__vector_19+0x60>
  fc:	e1 ec       	ldi	r30, 0xC1	; 193
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	80 83       	st	Z, r24
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <Uart_SetELOEndCharDetected>:
 11a:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end>
 11e:	08 95       	ret

00000120 <__vector_18>:
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
 142:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 146:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <RX_Head>
 14a:	9f 5f       	subi	r25, 0xFF	; 255
 14c:	89 2f       	mov	r24, r25
 14e:	86 95       	lsr	r24
 150:	eb ee       	ldi	r30, 0xEB	; 235
 152:	8e 9f       	mul	r24, r30
 154:	e1 2d       	mov	r30, r1
 156:	11 24       	eor	r1, r1
 158:	e2 95       	swap	r30
 15a:	e6 95       	lsr	r30
 15c:	e7 70       	andi	r30, 0x07	; 7
 15e:	86 e4       	ldi	r24, 0x46	; 70
 160:	e8 9f       	mul	r30, r24
 162:	90 19       	sub	r25, r0
 164:	11 24       	eor	r1, r1
 166:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <RX_Tail>
 16a:	98 13       	cpse	r25, r24
 16c:	06 c0       	rjmp	.+12     	; 0x17a <__vector_18+0x5a>
 16e:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <ErrorUart>
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <ErrorUart>
 178:	0c c0       	rjmp	.+24     	; 0x192 <__vector_18+0x72>
 17a:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <RX_Head>
 17e:	e9 2f       	mov	r30, r25
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e4 58       	subi	r30, 0x84	; 132
 184:	fd 4f       	sbci	r31, 0xFD	; 253
 186:	20 83       	st	Z, r18
 188:	2a 32       	cpi	r18, 0x2A	; 42
 18a:	19 f4       	brne	.+6      	; 0x192 <__vector_18+0x72>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 8d 00 	call	0x11a	; 0x11a <Uart_SetELOEndCharDetected>
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_11>:
uint8_t morseTableCharPos = 0;
uint8_t dashDotPtr = 0;
uint8_t flagStringSent = 0;

ISR(TIMER1_COMPA_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	8f 93       	push	r24
 1c0:	9f 93       	push	r25
 1c2:	ef 93       	push	r30
 1c4:	ff 93       	push	r31
	/* Toggle Port automaticaly with OC1A */
	
	/* Sart Debugging */
	PORTD = 0x01;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	8b b9       	out	0x0b, r24	; 11
	
	/* Enable sound, Timer 0 */
	TCCR0B ^= 0x4;
 1ca:	95 b5       	in	r25, 0x25	; 37
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	89 27       	eor	r24, r25
 1d0:	85 bd       	out	0x25, r24	; 37
	
	/* sets position of char in morse table (offset of 0x30)*/
	morseTableCharPos = (uint8_t)((uint8_t)stringToSend[CharOfStrPtr] - 0x30);
 1d2:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <CharOfStrPtr>
 1d6:	e8 2f       	mov	r30, r24
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	e0 50       	subi	r30, 0x00	; 0
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	e0 81       	ld	r30, Z
 1e0:	e0 53       	subi	r30, 0x30	; 48
 1e2:	e0 93 c4 02 	sts	0x02C4, r30	; 0x8002c4 <morseTableCharPos>
	
	switch (stateMorseSender)
 1e6:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <stateMorseSender>
 1ea:	91 30       	cpi	r25, 0x01	; 1
 1ec:	19 f0       	breq	.+6      	; 0x1f4 <__vector_11+0x40>
 1ee:	92 30       	cpi	r25, 0x02	; 2
 1f0:	09 f1       	breq	.+66     	; 0x234 <__vector_11+0x80>
 1f2:	7c c0       	rjmp	.+248    	; 0x2ec <__vector_11+0x138>
	{
		case STATE_SEND_DASH_DOT:
			/* If we have to send a char (dash or dot), set next top */
			/* value (duration) */
			if (MORSE_TABLE[morseTableCharPos][dashDotPtr] == '-')
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ec 59       	subi	r30, 0x9C	; 156
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	01 90       	ld	r0, Z+
 200:	f0 81       	ld	r31, Z
 202:	e0 2d       	mov	r30, r0
 204:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <dashDotPtr>
 208:	e8 0f       	add	r30, r24
 20a:	f1 1d       	adc	r31, r1
 20c:	80 81       	ld	r24, Z
 20e:	8d 32       	cpi	r24, 0x2D	; 45
 210:	39 f4       	brne	.+14     	; 0x220 <__vector_11+0x6c>
			{
				OCR1A = DASH_DURATION;
 212:	85 ea       	ldi	r24, 0xA5	; 165
 214:	9e e0       	ldi	r25, 0x0E	; 14
 216:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 21a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 21e:	06 c0       	rjmp	.+12     	; 0x22c <__vector_11+0x78>
			}
			else
			{
				OCR1A = DOT_DURATION;
 220:	81 ee       	ldi	r24, 0xE1	; 225
 222:	94 e0       	ldi	r25, 0x04	; 4
 224:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 228:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			}
			
			/* On next interrupt, we check if everything is sent or not */
			stateMorseSender = STATE_DOT_DASH_SENT;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <stateMorseSender>
		break;
 232:	5c c0       	rjmp	.+184    	; 0x2ec <__vector_11+0x138>
		
		case STATE_DOT_DASH_SENT:
			/* Assume we haven't sent all the dash/dots */ 
			dashDotPtr ++; 
 234:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <dashDotPtr>
 238:	9f 5f       	subi	r25, 0xFF	; 255
 23a:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <dashDotPtr>
			
			/* If all dot/dash were sent, pointed char is '\0' 
				--> select next char to be sent */ 
			if (MORSE_TABLE[morseTableCharPos][dashDotPtr] == '\0')
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	ee 0f       	add	r30, r30
 242:	ff 1f       	adc	r31, r31
 244:	ec 59       	subi	r30, 0x9C	; 156
 246:	fe 4f       	sbci	r31, 0xFE	; 254
 248:	01 90       	ld	r0, Z+
 24a:	f0 81       	ld	r31, Z
 24c:	e0 2d       	mov	r30, r0
 24e:	e9 0f       	add	r30, r25
 250:	f1 1d       	adc	r31, r1
 252:	90 81       	ld	r25, Z
 254:	91 11       	cpse	r25, r1
 256:	41 c0       	rjmp	.+130    	; 0x2da <__vector_11+0x126>
			{
				/* if not a dot or a dash: char sent out --> next char */
				dashDotPtr = 0;
 258:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <dashDotPtr>
				CharOfStrPtr ++;
 25c:	8f 5f       	subi	r24, 0xFF	; 255
 25e:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <CharOfStrPtr>
				
				/* check for if a space has to be sent out */
				if (stringToSend[CharOfStrPtr] == ' ')
 262:	e8 2f       	mov	r30, r24
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	e0 50       	subi	r30, 0x00	; 0
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	80 81       	ld	r24, Z
 26c:	80 32       	cpi	r24, 0x20	; 32
 26e:	f1 f4       	brne	.+60     	; 0x2ac <__vector_11+0xf8>
				{
					OCR1A = 0;
 270:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 274:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
					/* BUG FOUND When multiple spaces --> should not arrive */
					/* Dummy fix -> Count number of spaces*/
					while(stringToSend[CharOfStrPtr] == ' ')
 278:	0d c0       	rjmp	.+26     	; 0x294 <__vector_11+0xe0>
					{
						OCR1A += SPACE_DURATION;
 27a:	e8 e8       	ldi	r30, 0x88	; 136
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	91 81       	ldd	r25, Z+1	; 0x01
 282:	83 5d       	subi	r24, 0xD3	; 211
 284:	9d 4d       	sbci	r25, 0xDD	; 221
 286:	91 83       	std	Z+1, r25	; 0x01
 288:	80 83       	st	Z, r24
						CharOfStrPtr ++;
 28a:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <CharOfStrPtr>
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <CharOfStrPtr>
				if (stringToSend[CharOfStrPtr] == ' ')
				{
					OCR1A = 0;
					/* BUG FOUND When multiple spaces --> should not arrive */
					/* Dummy fix -> Count number of spaces*/
					while(stringToSend[CharOfStrPtr] == ' ')
 294:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <CharOfStrPtr>
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	e0 50       	subi	r30, 0x00	; 0
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	80 81       	ld	r24, Z
 2a0:	80 32       	cpi	r24, 0x20	; 32
 2a2:	59 f3       	breq	.-42     	; 0x27a <__vector_11+0xc6>
						CharOfStrPtr ++;
					}
					
					/* @TO DO : ERROR HANDLING IF TOO MUCH SPACE 
					(65k5 / Dash_duration)*/
					stateMorseSender = STATE_SEND_DASH_DOT;				
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <stateMorseSender>
 2aa:	20 c0       	rjmp	.+64     	; 0x2ec <__vector_11+0x138>
				}
				else
				{
					/* Check if no more char has to be sent out */
					if (stringToSend[CharOfStrPtr] == '\0')
 2ac:	81 11       	cpse	r24, r1
 2ae:	0b c0       	rjmp	.+22     	; 0x2c6 <__vector_11+0x112>
					{
						/* stops timer & clear everything */
						flagStringSent = 1;
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <flagStringSent>
						TCCR1B &= ~(0x07);
 2b6:	e1 e8       	ldi	r30, 0x81	; 129
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	88 7f       	andi	r24, 0xF8	; 248
 2be:	80 83       	st	Z, r24
						stateMorseSender = STATE_ENCODER_STOPPED;
 2c0:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <stateMorseSender>
 2c4:	13 c0       	rjmp	.+38     	; 0x2ec <__vector_11+0x138>
					}
					else
					{
						/* another char has to be sent out */
						OCR1A = DASH_DURATION;
 2c6:	85 ea       	ldi	r24, 0xA5	; 165
 2c8:	9e e0       	ldi	r25, 0x0E	; 14
 2ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
						stateMorseSender = STATE_SEND_DASH_DOT;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <stateMorseSender>
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <__vector_11+0x138>
				}
			}
			else
			{
				/* another dash/ dot to be sent */
				OCR1A = DOT_DURATION;
 2da:	81 ee       	ldi	r24, 0xE1	; 225
 2dc:	94 e0       	ldi	r25, 0x04	; 4
 2de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				stateMorseSender = STATE_SEND_DASH_DOT;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <stateMorseSender>
		default:
		break;
	}
	
	/*END Debugging*/
	PORTD = 0x00;
 2ec:	1b b8       	out	0x0b, r1	; 11
}
 2ee:	ff 91       	pop	r31
 2f0:	ef 91       	pop	r30
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	0f 90       	pop	r0
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	0f 90       	pop	r0
 2fc:	1f 90       	pop	r1
 2fe:	18 95       	reti

00000300 <main>:

int main(void)
{
	/* Enable Timer 1 in CTC mode, OCR1A as top value */
	TCCR1A = 0; /* insure to be initialized at 0 */
 300:	e0 e8       	ldi	r30, 0x80	; 128
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A0);
 306:	80 81       	ld	r24, Z
 308:	80 64       	ori	r24, 0x40	; 64
 30a:	80 83       	st	Z, r24
	
	TCCR1B = 0; /* insure to be initialized at 0 */
 30c:	e1 e8       	ldi	r30, 0x81	; 129
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	10 82       	st	Z, r1
	TCCR1B |= (1 << WGM12);
 312:	80 81       	ld	r24, Z
 314:	88 60       	ori	r24, 0x08	; 8
 316:	80 83       	st	Z, r24
	
	TIMSK1 = (1 << OCIE1A);
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	
	/*Timer 0 for sound*/
	TCCR0A = 0;
 31e:	14 bc       	out	0x24, r1	; 36
	TCCR0A |= ((1 << COM0A0) | (1 << WGM01));
 320:	84 b5       	in	r24, 0x24	; 36
 322:	82 64       	ori	r24, 0x42	; 66
 324:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0;
 326:	15 bc       	out	0x25, r1	; 37
	OCR0A = 35;  
 328:	83 e2       	ldi	r24, 0x23	; 35
 32a:	87 bd       	out	0x27, r24	; 39
	
	/*OC1A pin in output mode */
	DDRB |= 0x02;
 32c:	84 b1       	in	r24, 0x04	; 4
 32e:	82 60       	ori	r24, 0x02	; 2
 330:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0x41;
 332:	8a b1       	in	r24, 0x0a	; 10
 334:	81 64       	ori	r24, 0x41	; 65
 336:	8a b9       	out	0x0a, r24	; 10
	
	/* DUMMY LOOP */
    while (1) 
    {	
		if (flagStringSent == 0)
 338:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <flagStringSent>
 33c:	81 11       	cpse	r24, r1
 33e:	fc cf       	rjmp	.-8      	; 0x338 <main+0x38>
		{
			stateMorseSender = STATE_SEND_DASH_DOT;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <stateMorseSender>
			
			/* activate Timer */
			OCR1A = DOT_DURATION;
 346:	81 ee       	ldi	r24, 0xE1	; 225
 348:	94 e0       	ldi	r25, 0x04	; 4
 34a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 34e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			TCCR1B |= ((1 << CS12) | (1 << CS10));
 352:	e1 e8       	ldi	r30, 0x81	; 129
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	85 60       	ori	r24, 0x05	; 5
 35a:	80 83       	st	Z, r24
			sei();
 35c:	78 94       	sei
			
			/* Waiting for string to be sent, DUMMY MODE*/
			while(flagStringSent == 0);
 35e:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <flagStringSent>
 362:	88 23       	and	r24, r24
 364:	e1 f3       	breq	.-8      	; 0x35e <main+0x5e>
			
			/* DUMMY RESTART */
			cli();
 366:	f8 94       	cli
			CharOfStrPtr = 0;
 368:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <CharOfStrPtr>
			dashDotPtr = 0;
 36c:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <dashDotPtr>
			morseTableCharPos = 0;
 370:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <morseTableCharPos>
			flagStringSent = 0;
 374:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <flagStringSent>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	83 ed       	ldi	r24, 0xD3	; 211
 37c:	90 e3       	ldi	r25, 0x30	; 48
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <main+0x7e>
 386:	00 c0       	rjmp	.+0      	; 0x388 <main+0x88>
 388:	00 00       	nop
			//UART_PutChar('*');
			_delay_ms(1000);
			stateMorseSender = STATE_SEND_DASH_DOT;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <stateMorseSender>
			TCCR1B |= ((1 << CS12) | (1 << CS10));
 390:	e1 e8       	ldi	r30, 0x81	; 129
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	85 60       	ori	r24, 0x05	; 5
 398:	80 83       	st	Z, r24
			sei();		
 39a:	78 94       	sei
 39c:	cd cf       	rjmp	.-102    	; 0x338 <main+0x38>

0000039e <_exit>:
 39e:	f8 94       	cli

000003a0 <__stop_program>:
 3a0:	ff cf       	rjmp	.-2      	; 0x3a0 <__stop_program>
