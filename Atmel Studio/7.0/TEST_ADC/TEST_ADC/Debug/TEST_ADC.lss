
TEST_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000043a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800100  00800100  0000043a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000043a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000046c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001129  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ac0  00000000  00000000  000016f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a7e  00000000  00000000  000021b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076d  00000000  00000000  00002fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9b  00000000  00000000  00003731  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 64 01 	jmp	0x2c8	; 0x2c8 <__vector_18>
  4c:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 39       	cpi	r26, 0x92	; 146
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ae 01 	call	0x35c	; 0x35c <main>
  9e:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_SetPrescaler>:
	
	
	// Starting by clearing old prescaler factor
	// ADCSRA = |ADEN|ADSC|ADATE|ADIF|ADIE|ADPS2|ADPS1|ADPS0|
	//										 ^.....^.....^... <- Set to 0
	ADCSRA &= (0xF8);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	98 7f       	andi	r25, 0xF8	; 248
  ae:	90 83       	st	Z, r25
	
	// Setting prescaler , following Datasheet value of registers 
	switch (prescaler)
  b0:	88 30       	cpi	r24, 0x08	; 8
  b2:	f9 f0       	breq	.+62     	; 0xf2 <ADC_SetPrescaler+0x4c>
  b4:	38 f4       	brcc	.+14     	; 0xc4 <ADC_SetPrescaler+0x1e>
  b6:	82 30       	cpi	r24, 0x02	; 2
  b8:	81 f0       	breq	.+32     	; 0xda <ADC_SetPrescaler+0x34>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	a1 f0       	breq	.+40     	; 0xe6 <ADC_SetPrescaler+0x40>
  be:	81 11       	cpse	r24, r1
  c0:	36 c0       	rjmp	.+108    	; 0x12e <ADC_SetPrescaler+0x88>
  c2:	08 95       	ret
  c4:	80 32       	cpi	r24, 0x20	; 32
  c6:	09 f1       	breq	.+66     	; 0x10a <ADC_SetPrescaler+0x64>
  c8:	18 f4       	brcc	.+6      	; 0xd0 <ADC_SetPrescaler+0x2a>
  ca:	80 31       	cpi	r24, 0x10	; 16
  cc:	c1 f0       	breq	.+48     	; 0xfe <ADC_SetPrescaler+0x58>
  ce:	2f c0       	rjmp	.+94     	; 0x12e <ADC_SetPrescaler+0x88>
  d0:	80 34       	cpi	r24, 0x40	; 64
  d2:	09 f1       	breq	.+66     	; 0x116 <ADC_SetPrescaler+0x70>
  d4:	80 38       	cpi	r24, 0x80	; 128
  d6:	29 f1       	breq	.+74     	; 0x122 <ADC_SetPrescaler+0x7c>
  d8:	2a c0       	rjmp	.+84     	; 0x12e <ADC_SetPrescaler+0x88>
		case 0:
		// do nothing more
		break;
		
		case 2:
		ADCSRA |= 0x01;
  da:	ea e7       	ldi	r30, 0x7A	; 122
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
		break;
  e4:	08 95       	ret
		
		case 4:
		ADCSRA |= 0x02;
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
		break;
  f0:	08 95       	ret
		
		case 8:
		ADCSRA |= 0x03;
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	83 60       	ori	r24, 0x03	; 3
  fa:	80 83       	st	Z, r24
		break;
  fc:	08 95       	ret
		
		case 16:
		ADCSRA |= 0x04;
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
		break;
 108:	08 95       	ret
		
		case 32:
		ADCSRA |= 0x05;
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	85 60       	ori	r24, 0x05	; 5
 112:	80 83       	st	Z, r24
		break;
 114:	08 95       	ret
		
		case 64:
		ADCSRA |= 0x06;
 116:	ea e7       	ldi	r30, 0x7A	; 122
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	86 60       	ori	r24, 0x06	; 6
 11e:	80 83       	st	Z, r24
		break;
 120:	08 95       	ret
		
		case 128:
		ADCSRA |= 0x07;
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	80 83       	st	Z, r24
		break;
 12c:	08 95       	ret
		
		default:
		ADCSRA |= 0x07; // slow, but works better
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	87 60       	ori	r24, 0x07	; 7
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <ADC_SetReference>:
	
	
	// Starting by clearing old reference voltage
	// ADMUX = |REFS1|REFS0|ADLAR| - |MUX3|MUX2|MUX1|MUX0|
	//			  ^.....^.....<- Set to 0
	ADMUX &= 0x3F;
 13a:	ec e7       	ldi	r30, 0x7C	; 124
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	90 81       	ld	r25, Z
 140:	9f 73       	andi	r25, 0x3F	; 63
 142:	90 83       	st	Z, r25
	
	switch (refVoltage)
 144:	88 23       	and	r24, r24
 146:	59 f0       	breq	.+22     	; 0x15e <ADC_SetReference+0x24>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	21 f4       	brne	.+8      	; 0x154 <ADC_SetReference+0x1a>
		case ADCREF_AREF:
		// nothing to do
		break;
		
		case ADCREF_VREF_INT:
		ADMUX |= 0xC0;
 14c:	80 81       	ld	r24, Z
 14e:	80 6c       	ori	r24, 0xC0	; 192
 150:	80 83       	st	Z, r24
		break;
 152:	05 c0       	rjmp	.+10     	; 0x15e <ADC_SetReference+0x24>
		
		case ADCREF_AVCC:
		default:
		ADMUX |= 0x40;
 154:	ec e7       	ldi	r30, 0x7C	; 124
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 64       	ori	r24, 0x40	; 64
 15c:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	2f e7       	ldi	r18, 0x7F	; 127
 160:	88 e3       	ldi	r24, 0x38	; 56
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	21 50       	subi	r18, 0x01	; 1
 166:	80 40       	sbci	r24, 0x00	; 0
 168:	90 40       	sbci	r25, 0x00	; 0
 16a:	e1 f7       	brne	.-8      	; 0x164 <ADC_SetReference+0x2a>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <ADC_SetReference+0x34>
 16e:	00 00       	nop
 170:	08 95       	ret

00000172 <ADC_Init>:
 * @param  vref Reference voltage to set-up initialy (see def. in AVR_ADC.h)
 * @param  prescaler prescaler value for ADC clock (0,2,4,8,16,32,64,128)
 * @return void
 */
void ADC_Init(uint8_t vref, uint8_t prescaler)
{
 172:	cf 93       	push	r28
 174:	c6 2f       	mov	r28, r22
	// Activate ADC periphal
	ADCSRA |= (1 << ADEN);
 176:	ea e7       	ldi	r30, 0x7A	; 122
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	90 68       	ori	r25, 0x80	; 128
 17e:	90 83       	st	Z, r25
	//
	// if ADLAR = 1 :
	//		ADCH = |ADC9|ADC8|ADC7|ADC6|ADC5|ADC4|ADC3|ADC2|
	//		ADCL = |ADC1|ADC0|  - |  - |  - |  - |  - |  - |
	// (use ADLAR = 1, if 2 LSB are not significant)
	ADMUX &= ~(1<<ADLAR);
 180:	ec e7       	ldi	r30, 0x7C	; 124
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	90 81       	ld	r25, Z
 186:	9f 7d       	andi	r25, 0xDF	; 223
 188:	90 83       	st	Z, r25
	
	// Disable Digital input buffer
	// DIDR0 |= 0x0F;
	
	// Set ref Voltage
	ADC_SetReference(vref);
 18a:	0e 94 9d 00 	call	0x13a	; 0x13a <ADC_SetReference>
	
	// Set prescaler value
	ADC_SetPrescaler(prescaler);
 18e:	8c 2f       	mov	r24, r28
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_SetPrescaler>
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <ADC_ReadValue>:
uint16_t ADC_ReadValue(uint8_t channel)
{
	// Clear old channel selection
	// ADMUX = |REFS1|REFS0|ADLAR| - |MUX3|MUX2|MUX1|MUX0|
	//								   ^.....^....^....^ <- Set to 0
	ADMUX &= 0xF0;
 198:	ec e7       	ldi	r30, 0x7C	; 124
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	90 81       	ld	r25, Z
 19e:	90 7f       	andi	r25, 0xF0	; 240
 1a0:	90 83       	st	Z, r25
	
	// Set Channel
	ADMUX |= (channel & 0x0F);
 1a2:	90 81       	ld	r25, Z
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	98 2b       	or	r25, r24
 1a8:	90 83       	st	Z, r25
	
	// Start ADC Conversion
	ADCSRA |= (1<<ADSC);
 1aa:	ea e7       	ldi	r30, 0x7A	; 122
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
	
	// BLOQUING : WAIT END OF CONVERSION
	// To do : Handling with interrupt
	while((ADCSRA & (1<<ADIF))==0);
 1b4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1b8:	84 ff       	sbrs	r24, 4
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <ADC_ReadValue+0x1c>
	
	return (uint16_t)(ADCL | (ADCH << 8));
 1bc:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	98 2f       	mov	r25, r24
 1c8:	88 27       	eor	r24, r24
}
 1ca:	82 2b       	or	r24, r18
 1cc:	08 95       	ret

000001ce <ADC_ReadMeanValue>:
 *@param  channel ADC channel where to measure
 * @param  nSamples Number of sample to average
 * @return uint16_t ADC value, averaged 
 */
uint16_t ADC_ReadMeanValue(uint8_t channel, uint8_t nSamples)
{
 1ce:	cf 92       	push	r12
 1d0:	df 92       	push	r13
 1d2:	ef 92       	push	r14
 1d4:	ff 92       	push	r15
 1d6:	1f 93       	push	r17
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	18 2f       	mov	r17, r24
 1de:	d6 2f       	mov	r29, r22
	uint32_t Sum=0;
	// Reading values in a buffer
	for (uint8_t i=0; i < nSamples; i++)
 1e0:	c0 e0       	ldi	r28, 0x00	; 0
 * @param  nSamples Number of sample to average
 * @return uint16_t ADC value, averaged 
 */
uint16_t ADC_ReadMeanValue(uint8_t channel, uint8_t nSamples)
{
	uint32_t Sum=0;
 1e2:	c1 2c       	mov	r12, r1
 1e4:	d1 2c       	mov	r13, r1
 1e6:	76 01       	movw	r14, r12
	// Reading values in a buffer
	for (uint8_t i=0; i < nSamples; i++)
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <ADC_ReadMeanValue+0x2c>
	{
		Sum += ADC_ReadValue(channel);
 1ea:	81 2f       	mov	r24, r17
 1ec:	0e 94 cc 00 	call	0x198	; 0x198 <ADC_ReadValue>
 1f0:	c8 0e       	add	r12, r24
 1f2:	d9 1e       	adc	r13, r25
 1f4:	e1 1c       	adc	r14, r1
 1f6:	f1 1c       	adc	r15, r1
 */
uint16_t ADC_ReadMeanValue(uint8_t channel, uint8_t nSamples)
{
	uint32_t Sum=0;
	// Reading values in a buffer
	for (uint8_t i=0; i < nSamples; i++)
 1f8:	cf 5f       	subi	r28, 0xFF	; 255
 1fa:	cd 17       	cp	r28, r29
 1fc:	b0 f3       	brcs	.-20     	; 0x1ea <ADC_ReadMeanValue+0x1c>
	{
		Sum += ADC_ReadValue(channel);
	}
	
	return (uint16_t)(Sum / nSamples);
 1fe:	2d 2f       	mov	r18, r29
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	c7 01       	movw	r24, r14
 208:	b6 01       	movw	r22, r12
 20a:	0e 94 bf 01 	call	0x37e	; 0x37e <__udivmodsi4>
}
 20e:	c9 01       	movw	r24, r18
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	1f 91       	pop	r17
 216:	ff 90       	pop	r15
 218:	ef 90       	pop	r14
 21a:	df 90       	pop	r13
 21c:	cf 90       	pop	r12
 21e:	08 95       	ret

00000220 <UART_Init>:
	TX_Head = 0;
	TX_Tail = 0; 
	
	// returning ErrorUart (no-cost operation) 
	return ErrorUart;
}
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 226:	88 eb       	ldi	r24, 0xB8	; 184
 228:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 22c:	86 e0       	ldi	r24, 0x06	; 6
 22e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 232:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 236:	8f ec       	ldi	r24, 0xCF	; 207
 238:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 23c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <RX_Tail>
 240:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <RX_Head>
 244:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <TX_Tail>
 248:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <TX_Head>
 24c:	08 95       	ret

0000024e <__vector_19>:
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
 262:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TX_Tail>
 266:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TX_Head>
 26a:	98 17       	cp	r25, r24
 26c:	d9 f0       	breq	.+54     	; 0x2a4 <__vector_19+0x56>
 26e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TX_Tail>
 272:	9f 5f       	subi	r25, 0xFF	; 255
 274:	89 2f       	mov	r24, r25
 276:	86 95       	lsr	r24
 278:	2b ee       	ldi	r18, 0xEB	; 235
 27a:	82 9f       	mul	r24, r18
 27c:	81 2d       	mov	r24, r1
 27e:	11 24       	eor	r1, r1
 280:	82 95       	swap	r24
 282:	86 95       	lsr	r24
 284:	87 70       	andi	r24, 0x07	; 7
 286:	26 e4       	ldi	r18, 0x46	; 70
 288:	82 9f       	mul	r24, r18
 28a:	90 19       	sub	r25, r0
 28c:	11 24       	eor	r1, r1
 28e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <TX_Tail>
 292:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <TX_Tail>
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	ea 5f       	subi	r30, 0xFA	; 250
 29a:	fe 4f       	sbci	r31, 0xFE	; 254
 29c:	80 81       	ld	r24, Z
 29e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2a2:	05 c0       	rjmp	.+10     	; 0x2ae <__vector_19+0x60>
 2a4:	e1 ec       	ldi	r30, 0xC1	; 193
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	8f 7d       	andi	r24, 0xDF	; 223
 2ac:	80 83       	st	Z, r24
 2ae:	ff 91       	pop	r31
 2b0:	ef 91       	pop	r30
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	2f 91       	pop	r18
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <Uart_SetELOEndCharDetected>:
 * @param  value Value of flag to be set
 * @return void
 */
void Uart_SetELOEndCharDetected(uint8_t value)
{
	EloEndCharDetected = value;
 2c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 2c6:	08 95       	ret

000002c8 <__vector_18>:
 * When interrupt occures, the new data has to be stored in circular buffer.
 * Head pointer increases, only if buffer is not full.
 *
*/
ISR(USART_RX_vect)
{
 2c8:	1f 92       	push	r1
 2ca:	0f 92       	push	r0
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	0f 92       	push	r0
 2d0:	11 24       	eor	r1, r1
 2d2:	2f 93       	push	r18
 2d4:	3f 93       	push	r19
 2d6:	4f 93       	push	r20
 2d8:	5f 93       	push	r21
 2da:	6f 93       	push	r22
 2dc:	7f 93       	push	r23
 2de:	8f 93       	push	r24
 2e0:	9f 93       	push	r25
 2e2:	af 93       	push	r26
 2e4:	bf 93       	push	r27
 2e6:	ef 93       	push	r30
 2e8:	ff 93       	push	r31
	char data;			// Temporary (to empty UDR)
	uint8_t tmpRXHead;	// Temporary (for computations) 
	
	data = UDR_REG;		// empty UDR in temporary variable 
 2ea:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						// this permits to receive another data (avoid loss)
	
	tmpRXHead = RX_Head + 1;			// Increase position of tmp head 
 2ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <RX_Head>
 2f2:	9f 5f       	subi	r25, 0xFF	; 255
	tmpRXHead %= UART_RX_BUFFER_SIZE;	// cycling buffer position if max reached
 2f4:	89 2f       	mov	r24, r25
 2f6:	86 95       	lsr	r24
 2f8:	eb ee       	ldi	r30, 0xEB	; 235
 2fa:	8e 9f       	mul	r24, r30
 2fc:	e1 2d       	mov	r30, r1
 2fe:	11 24       	eor	r1, r1
 300:	e2 95       	swap	r30
 302:	e6 95       	lsr	r30
 304:	e7 70       	andi	r30, 0x07	; 7
 306:	86 e4       	ldi	r24, 0x46	; 70
 308:	e8 9f       	mul	r30, r24
 30a:	90 19       	sub	r25, r0
 30c:	11 24       	eor	r1, r1
	
	// Is RX_Buffer full ? 
	if (tmpRXHead == RX_Tail)
 30e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <RX_Tail>
 312:	98 13       	cpse	r25, r24
 314:	06 c0       	rjmp	.+12     	; 0x322 <__vector_18+0x5a>
	{
		// --> ERROR : RX Buffer is full 
		ErrorUart |= UART_ERROR_RX_BUFFER_FULL; // Buffer is full, handle exeption ! 
 316:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ErrorUart>
 31a:	82 60       	ori	r24, 0x02	; 2
 31c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ErrorUart>
 320:	0c c0       	rjmp	.+24     	; 0x33a <__vector_18+0x72>
	}
	else
	{
		RX_Head = tmpRXHead ;			// Save new pointer position
 322:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <RX_Head>
		RX_Buffer[tmpRXHead] = data;	// Save data in buffer
 326:	e9 2f       	mov	r30, r25
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	e4 5b       	subi	r30, 0xB4	; 180
 32c:	fe 4f       	sbci	r31, 0xFE	; 254
 32e:	20 83       	st	Z, r18
		
		// ELO Protocole handling
		if (data == '*')
 330:	2a 32       	cpi	r18, 0x2A	; 42
 332:	19 f4       	brne	.+6      	; 0x33a <__vector_18+0x72>
		{
			Uart_SetELOEndCharDetected(0x01);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 61 01 	call	0x2c2	; 0x2c2 <Uart_SetELOEndCharDetected>
		}
	}
}
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	bf 91       	pop	r27
 340:	af 91       	pop	r26
 342:	9f 91       	pop	r25
 344:	8f 91       	pop	r24
 346:	7f 91       	pop	r23
 348:	6f 91       	pop	r22
 34a:	5f 91       	pop	r21
 34c:	4f 91       	pop	r20
 34e:	3f 91       	pop	r19
 350:	2f 91       	pop	r18
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <main>:
#include <avr/interrupt.h>

int main(void)
{
	
	DDRD = 0x3F;
 35c:	8f e3       	ldi	r24, 0x3F	; 63
 35e:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x0F;
 360:	8f e0       	ldi	r24, 0x0F	; 15
 362:	87 b9       	out	0x07, r24	; 7
	
    /* Replace with your application code */
	ADC_Init(1,128);
 364:	60 e8       	ldi	r22, 0x80	; 128
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 b9 00 	call	0x172	; 0x172 <ADC_Init>
	
	UART_Init();
 36c:	0e 94 10 01 	call	0x220	; 0x220 <UART_Init>
	
	sei();
 370:	78 94       	sei
	
    while (1) 
    {
		PORTD = ADC_ReadMeanValue(0x01, 255);
 372:	6f ef       	ldi	r22, 0xFF	; 255
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 e7 00 	call	0x1ce	; 0x1ce <ADC_ReadMeanValue>
 37a:	8b b9       	out	0x0b, r24	; 11
 37c:	fa cf       	rjmp	.-12     	; 0x372 <main+0x16>

0000037e <__udivmodsi4>:
 37e:	a1 e2       	ldi	r26, 0x21	; 33
 380:	1a 2e       	mov	r1, r26
 382:	aa 1b       	sub	r26, r26
 384:	bb 1b       	sub	r27, r27
 386:	fd 01       	movw	r30, r26
 388:	0d c0       	rjmp	.+26     	; 0x3a4 <__udivmodsi4_ep>

0000038a <__udivmodsi4_loop>:
 38a:	aa 1f       	adc	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	ee 1f       	adc	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	a2 17       	cp	r26, r18
 394:	b3 07       	cpc	r27, r19
 396:	e4 07       	cpc	r30, r20
 398:	f5 07       	cpc	r31, r21
 39a:	20 f0       	brcs	.+8      	; 0x3a4 <__udivmodsi4_ep>
 39c:	a2 1b       	sub	r26, r18
 39e:	b3 0b       	sbc	r27, r19
 3a0:	e4 0b       	sbc	r30, r20
 3a2:	f5 0b       	sbc	r31, r21

000003a4 <__udivmodsi4_ep>:
 3a4:	66 1f       	adc	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	1a 94       	dec	r1
 3ae:	69 f7       	brne	.-38     	; 0x38a <__udivmodsi4_loop>
 3b0:	60 95       	com	r22
 3b2:	70 95       	com	r23
 3b4:	80 95       	com	r24
 3b6:	90 95       	com	r25
 3b8:	9b 01       	movw	r18, r22
 3ba:	ac 01       	movw	r20, r24
 3bc:	bd 01       	movw	r22, r26
 3be:	cf 01       	movw	r24, r30
 3c0:	08 95       	ret

000003c2 <_exit>:
 3c2:	f8 94       	cli

000003c4 <__stop_program>:
 3c4:	ff cf       	rjmp	.-2      	; 0x3c4 <__stop_program>
