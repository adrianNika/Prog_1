
Timer-Mode-CTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000778  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002da  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cf  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001743  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_11>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_Timer>:
}

/*NO select prescaler => NO CLOCK*/
void Timer_Stop(void)
{
	TCCR1B |= TIMER_STOP;
  80:	e1 e8       	ldi	r30, 0x81	; 129
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	10 82       	st	Z, r1
  86:	80 81       	ld	r24, Z
  88:	88 60       	ori	r24, 0x08	; 8
  8a:	80 83       	st	Z, r24
  8c:	ef e6       	ldi	r30, 0x6F	; 111
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1
  92:	80 81       	ld	r24, Z
  94:	82 60       	ori	r24, 0x02	; 2
  96:	80 83       	st	Z, r24
  98:	8f e9       	ldi	r24, 0x9F	; 159
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  a0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  a4:	08 95       	ret

000000a6 <Timer_Start>:
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
  b0:	08 95       	ret

000000b2 <__vector_11>:
}

/*interuption par comparaison avec OCR1A et le compteur*/
ISR(TIMER1_COMPA_vect)
{
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
	/*toggle de la sortie PD0*/
	PORTD ^= 0x01;
  c0:	9b b1       	in	r25, 0x0b	; 11
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	89 27       	eor	r24, r25
  c6:	8b b9       	out	0x0b, r24	; 11
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <main>:


int main(void)
{
	DDRD = 0xFF; /*initialisation en sortie du PORTD*/
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a b9       	out	0x0a, r24	; 10
	Init_Timer(); /*initialiser mon timer*/
  da:	0e 94 40 00 	call	0x80	; 0x80 <Init_Timer>
	Timer_Start();
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <Timer_Start>
	sei(); /*innitialiser les interuptions*/
  e2:	78 94       	sei
    
    while (1) 
    {
		/*toggle de la sortie PD1*/
		PORTD ^= 0x02;
  e4:	9b b1       	in	r25, 0x0b	; 11
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	89 27       	eor	r24, r25
  ea:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	89 e6       	ldi	r24, 0x69	; 105
  f0:	98 e1       	ldi	r25, 0x18	; 24
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x26>
  fc:	00 00       	nop
  fe:	f2 cf       	rjmp	.-28     	; 0xe4 <main+0xe>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
