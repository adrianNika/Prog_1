
Timer-RPC-modifiable-V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d4  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000062a  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000221  00000000  00000000  00000ef2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000396  00000000  00000000  00001148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  000014de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <Init_Timer>:
/*fonction timer mode fast PWM ICR1*/
void Init_Timer(void)
{
	/*COM1A1 pour activer la sortie OC1A
	  WGM11 bit actif pour le mode fast PWM ICR1*/
	TCCR1A |= ((1<<COM1A1) | (1<<WGM11));
  80:	e0 e8       	ldi	r30, 0x80	; 128
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 68       	ori	r24, 0x82	; 130
  88:	80 83       	st	Z, r24
													
	/*WGM12 et WGM13 bit actif pour le mode fast PWN ICR1
	  CS10 pour sélectionner le prediviseur de 1 pour activer la CLK*/	
	TCCR1B |= ((1<<WGM13) | (1<<WGM12) | (1<<CS10)); 
  8a:	e1 e8       	ldi	r30, 0x81	; 129
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 81       	ld	r24, Z
  90:	89 61       	ori	r24, 0x19	; 25
  92:	80 83       	st	Z, r24
	
	ICR1 = 380; /*valeur TOP max avec Fréquence de 42KHz*/
  94:	8c e7       	ldi	r24, 0x7C	; 124
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  9c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	DDRB |= (1<<PINB1); /*PIN1 du portB actif pour sortir OC1A*/
  a0:	84 b1       	in	r24, 0x04	; 4
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	84 b9       	out	0x04, r24	; 4
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
	Init_Timer();/*initialise la fonction timer*/
  a8:	0e 94 40 00 	call	0x80	; 0x80 <Init_Timer>
	
	DDRD = 0x00; /*initialiser les entrees*/
  ac:	1a b8       	out	0x0a, r1	; 10
	
	uint8_t entree = 0;
	uint8_t lastEntree = 0;
  ae:	80 e0       	ldi	r24, 0x00	; 0
	uint8_t rapport_cyclique= 0;
	
	while (1)
	{
		entree = PIND;/*entree qui permet de simuler un rapport cyclique*/
  b0:	49 b1       	in	r20, 0x09	; 9
		
		/*calcule le rpc et assigne la valeur à OCR1A*/
		if (lastEntree != entree)
  b2:	84 17       	cp	r24, r20
  b4:	e9 f3       	breq	.-6      	; 0xb0 <main+0x8>
		{
			/*asigne la valeur du rapport cyclique*/
			lastEntree = entree;
			rapport_cyclique = lastEntree;
			
			OCR1A = rapport_cyclique * ICR1 / 100; /*calculer la valeur OCR1A avec le rpc(rapport cyclique)*/
  b6:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  ba:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  be:	48 9f       	mul	r20, r24
  c0:	90 01       	movw	r18, r0
  c2:	49 9f       	mul	r20, r25
  c4:	30 0d       	add	r19, r0
  c6:	11 24       	eor	r1, r1
  c8:	36 95       	lsr	r19
  ca:	27 95       	ror	r18
  cc:	36 95       	lsr	r19
  ce:	27 95       	ror	r18
  d0:	ab e7       	ldi	r26, 0x7B	; 123
  d2:	b4 e1       	ldi	r27, 0x14	; 20
  d4:	0e 94 74 00 	call	0xe8	; 0xe8 <__umulhisi3>
  d8:	96 95       	lsr	r25
  da:	87 95       	ror	r24
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		
		/*calcule le rpc et assigne la valeur à OCR1A*/
		if (lastEntree != entree)
		{
			/*asigne la valeur du rapport cyclique*/
			lastEntree = entree;
  e4:	84 2f       	mov	r24, r20
  e6:	e4 cf       	rjmp	.-56     	; 0xb0 <main+0x8>

000000e8 <__umulhisi3>:
  e8:	a2 9f       	mul	r26, r18
  ea:	b0 01       	movw	r22, r0
  ec:	b3 9f       	mul	r27, r19
  ee:	c0 01       	movw	r24, r0
  f0:	a3 9f       	mul	r26, r19
  f2:	70 0d       	add	r23, r0
  f4:	81 1d       	adc	r24, r1
  f6:	11 24       	eor	r1, r1
  f8:	91 1d       	adc	r25, r1
  fa:	b2 9f       	mul	r27, r18
  fc:	70 0d       	add	r23, r0
  fe:	81 1d       	adc	r24, r1
 100:	11 24       	eor	r1, r1
 102:	91 1d       	adc	r25, r1
 104:	08 95       	ret

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
