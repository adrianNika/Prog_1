
TEST_INPUT_CAPTURE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000037a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000037a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000099  00800102  00800102  00000410  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001005  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fd  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099a  00000000  00000000  00001f76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00002910  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000728  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a23  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_18>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 39       	cpi	r26, 0x9B	; 155
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  9e:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_Init>:
	TX_Head = 0;
	TX_Tail = 0; 
	
	// returning ErrorUart (no-cost operation) 
	return ErrorUart;
}
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ac:	88 eb       	ldi	r24, 0xB8	; 184
  ae:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  b2:	86 e0       	ldi	r24, 0x06	; 6
  b4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  bc:	8f ec       	ldi	r24, 0xCF	; 207
  be:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  c2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <RX_Tail>
  c6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <RX_Head>
  ca:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <TX_Tail>
  ce:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <TX_Head>
  d2:	08 95       	ret

000000d4 <__vector_19>:
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
  e8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <TX_Tail>
  ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TX_Head>
  f0:	98 17       	cp	r25, r24
  f2:	d9 f0       	breq	.+54     	; 0x12a <__vector_19+0x56>
  f4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <TX_Tail>
  f8:	9f 5f       	subi	r25, 0xFF	; 255
  fa:	89 2f       	mov	r24, r25
  fc:	86 95       	lsr	r24
  fe:	2b ee       	ldi	r18, 0xEB	; 235
 100:	82 9f       	mul	r24, r18
 102:	81 2d       	mov	r24, r1
 104:	11 24       	eor	r1, r1
 106:	82 95       	swap	r24
 108:	86 95       	lsr	r24
 10a:	87 70       	andi	r24, 0x07	; 7
 10c:	26 e4       	ldi	r18, 0x46	; 70
 10e:	82 9f       	mul	r24, r18
 110:	90 19       	sub	r25, r0
 112:	11 24       	eor	r1, r1
 114:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <TX_Tail>
 118:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <TX_Tail>
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	e8 5f       	subi	r30, 0xF8	; 248
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	80 81       	ld	r24, Z
 124:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 128:	05 c0       	rjmp	.+10     	; 0x134 <__vector_19+0x60>
 12a:	e1 ec       	ldi	r30, 0xC1	; 193
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8f 7d       	andi	r24, 0xDF	; 223
 132:	80 83       	st	Z, r24
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <Uart_SetELOEndCharDetected>:
 * @param  value Value of flag to be set
 * @return void
 */
void Uart_SetELOEndCharDetected(uint8_t value)
{
	EloEndCharDetected = value;
 148:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 14c:	08 95       	ret

0000014e <__vector_18>:
 * When interrupt occures, the new data has to be stored in circular buffer.
 * Head pointer increases, only if buffer is not full.
 *
*/
ISR(USART_RX_vect)
{
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	2f 93       	push	r18
 15a:	3f 93       	push	r19
 15c:	4f 93       	push	r20
 15e:	5f 93       	push	r21
 160:	6f 93       	push	r22
 162:	7f 93       	push	r23
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	af 93       	push	r26
 16a:	bf 93       	push	r27
 16c:	ef 93       	push	r30
 16e:	ff 93       	push	r31
	char data;			// Temporary (to empty UDR)
	uint8_t tmpRXHead;	// Temporary (for computations) 
	
	data = UDR_REG;		// empty UDR in temporary variable 
 170:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						// this permits to receive another data (avoid loss)
	
	tmpRXHead = RX_Head + 1;			// Increase position of tmp head 
 174:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RX_Head>
 178:	9f 5f       	subi	r25, 0xFF	; 255
	tmpRXHead %= UART_RX_BUFFER_SIZE;	// cycling buffer position if max reached
 17a:	89 2f       	mov	r24, r25
 17c:	86 95       	lsr	r24
 17e:	eb ee       	ldi	r30, 0xEB	; 235
 180:	8e 9f       	mul	r24, r30
 182:	e1 2d       	mov	r30, r1
 184:	11 24       	eor	r1, r1
 186:	e2 95       	swap	r30
 188:	e6 95       	lsr	r30
 18a:	e7 70       	andi	r30, 0x07	; 7
 18c:	86 e4       	ldi	r24, 0x46	; 70
 18e:	e8 9f       	mul	r30, r24
 190:	90 19       	sub	r25, r0
 192:	11 24       	eor	r1, r1
	
	// Is RX_Buffer full ? 
	if (tmpRXHead == RX_Tail)
 194:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RX_Tail>
 198:	98 13       	cpse	r25, r24
 19a:	06 c0       	rjmp	.+12     	; 0x1a8 <__vector_18+0x5a>
	{
		// --> ERROR : RX Buffer is full 
		ErrorUart |= UART_ERROR_RX_BUFFER_FULL; // Buffer is full, handle exeption ! 
 19c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ErrorUart>
 1a0:	82 60       	ori	r24, 0x02	; 2
 1a2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ErrorUart>
 1a6:	0c c0       	rjmp	.+24     	; 0x1c0 <__vector_18+0x72>
	}
	else
	{
		RX_Head = tmpRXHead ;			// Save new pointer position
 1a8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RX_Head>
		RX_Buffer[tmpRXHead] = data;	// Save data in buffer
 1ac:	e9 2f       	mov	r30, r25
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	e2 5b       	subi	r30, 0xB2	; 178
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	20 83       	st	Z, r18
		
		// ELO Protocole handling
		if (data == '*')
 1b6:	2a 32       	cpi	r18, 0x2A	; 42
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_18+0x72>
		{
			Uart_SetELOEndCharDetected(0x01);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 a4 00 	call	0x148	; 0x148 <Uart_SetELOEndCharDetected>
		}
	}
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <__vector_13>:
uint8_t overflowWhileMeasurement = 0;
uint8_t computeNewTimeBase = 0;


ISR(TIMER1_OVF_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	8f 93       	push	r24
	if (overflowWhileMeasurement == 0)
 1f2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <overflowWhileMeasurement>
 1f6:	81 11       	cpse	r24, r1
 1f8:	09 c0       	rjmp	.+18     	; 0x20c <__vector_13+0x2a>
	{
		if (firstCapture != 0x0000)
 1fa:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <firstCapture>
 1fe:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <firstCapture+0x1>
 202:	23 2b       	or	r18, r19
 204:	19 f0       	breq	.+6      	; 0x20c <__vector_13+0x2a>
		{
			overflowWhileMeasurement++;
 206:	8f 5f       	subi	r24, 0xFF	; 255
 208:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <overflowWhileMeasurement>
		else
		{
			/**/
		}
	}
}
 20c:	8f 91       	pop	r24
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <__vector_10>:

ISR(TIMER1_CAPT_vect)
{	
 21c:	1f 92       	push	r1
 21e:	0f 92       	push	r0
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
	cli();
 22a:	f8 94       	cli
	
	secondCapture = ICR1;
 22c:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 230:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 234:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <secondCapture+0x1>
 238:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <secondCapture>
	computeNewTimeBase = 1;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <computeNewTimeBase>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	8f e1       	ldi	r24, 0x1F	; 31
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <__vector_10+0x2a>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <__vector_10+0x30>
 24c:	00 00       	nop

	_delay_us(200);
	
	TIFR1 |= (1 << ICF1);
 24e:	86 b3       	in	r24, 0x16	; 22
 250:	80 62       	ori	r24, 0x20	; 32
 252:	86 bb       	out	0x16, r24	; 22
	sei();
 254:	78 94       	sei
}
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <Init_Timer>:

void Init_Timer (void)
{
	OCR1A = actualTopValue;
 264:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 268:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 26c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 270:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	TCCR1A = 0x00;
 274:	e0 e8       	ldi	r30, 0x80	; 128
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A0);
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	80 83       	st	Z, r24
	
	TCCR1B = 0x00;
 280:	e1 e8       	ldi	r30, 0x81	; 129
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	10 82       	st	Z, r1
	TCCR1B |= 0b11001000;
 286:	80 81       	ld	r24, Z
 288:	88 6c       	ori	r24, 0xC8	; 200
 28a:	80 83       	st	Z, r24

	TIMSK1 = 0x00;
 28c:	ef e6       	ldi	r30, 0x6F	; 111
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	10 82       	st	Z, r1
	TIMSK1 |= ((1 << TOIE1) | (1 << ICIE1));
 292:	80 81       	ld	r24, Z
 294:	81 62       	ori	r24, 0x21	; 33
 296:	80 83       	st	Z, r24
 298:	08 95       	ret

0000029a <Start_timer>:
}

void Start_timer (void)
{
	TCCR1B |= 0b11001101;
 29a:	e1 e8       	ldi	r30, 0x81	; 129
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8d 6c       	ori	r24, 0xCD	; 205
 2a2:	80 83       	st	Z, r24
 2a4:	08 95       	ret

000002a6 <main>:
}

int main(void)
{
	DDRB |= 0x02;
 2a6:	84 b1       	in	r24, 0x04	; 4
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x01;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	8a b9       	out	0x0a, r24	; 10

	Init_Timer();
 2b0:	0e 94 32 01 	call	0x264	; 0x264 <Init_Timer>
	UART_Init();
 2b4:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_Init>

	sei();
 2b8:	78 94       	sei

	while (1)
	{
		PORTD = 0x01;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	83 ed       	ldi	r24, 0xD3	; 211
 2c2:	90 e3       	ldi	r25, 0x30	; 48
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <main+0x1e>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <main+0x28>
 2ce:	00 00       	nop
		_delay_ms(1000);
		PORTD = 0x00;
 2d0:	1b b8       	out	0x0b, r1	; 11
		
		if (PORTD == 0x00 && flag == 0)
 2d2:	8b b1       	in	r24, 0x0b	; 11
 2d4:	81 11       	cpse	r24, r1
 2d6:	13 c0       	rjmp	.+38     	; 0x2fe <main+0x58>
 2d8:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <flag>
 2dc:	81 11       	cpse	r24, r1
 2de:	0f c0       	rjmp	.+30     	; 0x2fe <main+0x58>
		{
			Start_timer();
 2e0:	0e 94 4d 01 	call	0x29a	; 0x29a <Start_timer>
			firstCapture = ICR1;
 2e4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2e8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2ec:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <firstCapture+0x1>
 2f0:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <firstCapture>
			while(bit_is_clear(PINB,0));
 2f4:	18 9b       	sbis	0x03, 0	; 3
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <main+0x4e>
			flag = 1;
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <flag>
		}
		
		if(computeNewTimeBase != 0)
 2fe:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <computeNewTimeBase>
 302:	88 23       	and	r24, r24
 304:	d1 f2       	breq	.-76     	; 0x2ba <main+0x14>
		{
			cli();
 306:	f8 94       	cli

			if (overflowWhileMeasurement <= 1)
 308:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <overflowWhileMeasurement>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	c8 f4       	brcc	.+50     	; 0x342 <main+0x9c>
			{
				if (secondCapture > firstCapture)
 310:	80 91 97 01 	lds	r24, 0x0197	; 0x800197 <secondCapture>
 314:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <secondCapture+0x1>
 318:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <firstCapture>
 31c:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <firstCapture+0x1>
 320:	28 17       	cp	r18, r24
 322:	39 07       	cpc	r19, r25
 324:	38 f4       	brcc	.+14     	; 0x334 <main+0x8e>
				{
					actualTopValue = secondCapture - firstCapture;
 326:	82 1b       	sub	r24, r18
 328:	93 0b       	sbc	r25, r19
 32a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 32e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 332:	07 c0       	rjmp	.+14     	; 0x342 <main+0x9c>
				}
				else
				{
					actualTopValue = (0xFFFF - firstCapture) + secondCapture;
 334:	82 1b       	sub	r24, r18
 336:	93 0b       	sbc	r25, r19
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 33e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
				}
			}
			
			OCR1A = actualTopValue;
 342:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 346:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 34a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 34e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			TCNT1 = 0x0000;
 352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
			firstCapture = 0;
 35a:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <firstCapture+0x1>
 35e:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <firstCapture>
			secondCapture = 0;
 362:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <secondCapture+0x1>
 366:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <secondCapture>
			computeNewTimeBase = 0;
 36a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <computeNewTimeBase>
			overflowWhileMeasurement = 0;
 36e:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <overflowWhileMeasurement>
			
			sei();
 372:	78 94       	sei
 374:	a2 cf       	rjmp	.-188    	; 0x2ba <main+0x14>

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
