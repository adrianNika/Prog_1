
TEST_TDUS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000144  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000084c  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000690  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000227  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000012dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000399  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000026  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000016cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  88:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <sortie>:

U_input input;

void sortie (int valeur)
{
	PORTC = valeur & 0x0F;
  90:	98 2f       	mov	r25, r24
  92:	9f 70       	andi	r25, 0x0F	; 15
  94:	98 b9       	out	0x08, r25	; 8
	PORTD = (valeur & 0xF0);
  96:	80 7f       	andi	r24, 0xF0	; 240
  98:	8b b9       	out	0x0b, r24	; 11
  9a:	08 95       	ret

0000009c <main>:
}

int main(void)
{
	DDRC = 0x0F;
  9c:	8f e0       	ldi	r24, 0x0F	; 15
  9e:	87 b9       	out	0x07, r24	; 7
	DDRD = 0xF0;
  a0:	80 ef       	ldi	r24, 0xF0	; 240
  a2:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;
  a4:	14 b8       	out	0x04, r1	; 4
	
    /* Replace with your application code */
    while (1) 
    {
		input.byte = PINB;
  a6:	83 b1       	in	r24, 0x03	; 3
  a8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <input>
		
		if (input.S_input.zero == 0x01)
  ac:	80 ff       	sbrs	r24, 0
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x1a>
		{
			output.byte = 0x0F;
  b0:	9f e0       	ldi	r25, 0x0F	; 15
  b2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		
		if (input.S_input.un == 0x01)
  b6:	81 ff       	sbrs	r24, 1
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <main+0x24>
		{
			output.byte = 0xF0;
  ba:	80 ef       	ldi	r24, 0xF0	; 240
  bc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		
		sortie(output.byte);
  c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 48 00 	call	0x90	; 0x90 <sortie>
    }
  ca:	ed cf       	rjmp	.-38     	; 0xa6 <main+0xa>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
