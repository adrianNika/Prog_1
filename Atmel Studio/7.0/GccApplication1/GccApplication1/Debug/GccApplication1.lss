
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009b  00800102  00800102  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f65  00000000  00000000  0000055c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bc  00000000  00000000  000014c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000095a  00000000  00000000  00001e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000318  00000000  00000000  000027d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000717  00000000  00000000  00002af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a0f  00000000  00000000  00003207  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00003c16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_10>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 39       	cpi	r26, 0x9D	; 157
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  9e:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
	TX_Head = 0;
	TX_Tail = 0; 
	
	// returning ErrorUart (no-cost operation) 
	return ErrorUart;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <TX_Tail>
  be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <TX_Head>
  c2:	98 17       	cp	r25, r24
  c4:	d9 f0       	breq	.+54     	; 0xfc <__vector_19+0x56>
  c6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <TX_Tail>
  ca:	9f 5f       	subi	r25, 0xFF	; 255
  cc:	89 2f       	mov	r24, r25
  ce:	86 95       	lsr	r24
  d0:	2b ee       	ldi	r18, 0xEB	; 235
  d2:	82 9f       	mul	r24, r18
  d4:	81 2d       	mov	r24, r1
  d6:	11 24       	eor	r1, r1
  d8:	82 95       	swap	r24
  da:	86 95       	lsr	r24
  dc:	87 70       	andi	r24, 0x07	; 7
  de:	26 e4       	ldi	r18, 0x46	; 70
  e0:	82 9f       	mul	r24, r18
  e2:	90 19       	sub	r25, r0
  e4:	11 24       	eor	r1, r1
  e6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <TX_Tail>
  ea:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <TX_Tail>
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e8 5f       	subi	r30, 0xF8	; 248
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	80 81       	ld	r24, Z
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <__vector_19+0x60>
  fc:	e1 ec       	ldi	r30, 0xC1	; 193
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	80 83       	st	Z, r24
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <Uart_SetELOEndCharDetected>:
 * @param  value Value of flag to be set
 * @return void
 */
void Uart_SetELOEndCharDetected(uint8_t value)
{
	EloEndCharDetected = value;
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 11e:	08 95       	ret

00000120 <__vector_18>:
 * When interrupt occures, the new data has to be stored in circular buffer.
 * Head pointer increases, only if buffer is not full.
 *
*/
ISR(USART_RX_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	char data;			// Temporary (to empty UDR)
	uint8_t tmpRXHead;	// Temporary (for computations) 
	
	data = UDR_REG;		// empty UDR in temporary variable 
 142:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						// this permits to receive another data (avoid loss)
	
	tmpRXHead = RX_Head + 1;			// Increase position of tmp head 
 146:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <RX_Head>
 14a:	9f 5f       	subi	r25, 0xFF	; 255
	tmpRXHead %= UART_RX_BUFFER_SIZE;	// cycling buffer position if max reached
 14c:	89 2f       	mov	r24, r25
 14e:	86 95       	lsr	r24
 150:	eb ee       	ldi	r30, 0xEB	; 235
 152:	8e 9f       	mul	r24, r30
 154:	e1 2d       	mov	r30, r1
 156:	11 24       	eor	r1, r1
 158:	e2 95       	swap	r30
 15a:	e6 95       	lsr	r30
 15c:	e7 70       	andi	r30, 0x07	; 7
 15e:	86 e4       	ldi	r24, 0x46	; 70
 160:	e8 9f       	mul	r30, r24
 162:	90 19       	sub	r25, r0
 164:	11 24       	eor	r1, r1
	
	// Is RX_Buffer full ? 
	if (tmpRXHead == RX_Tail)
 166:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <RX_Tail>
 16a:	98 13       	cpse	r25, r24
 16c:	06 c0       	rjmp	.+12     	; 0x17a <__vector_18+0x5a>
	{
		// --> ERROR : RX Buffer is full 
		ErrorUart |= UART_ERROR_RX_BUFFER_FULL; // Buffer is full, handle exeption ! 
 16e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ErrorUart>
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ErrorUart>
 178:	0c c0       	rjmp	.+24     	; 0x192 <__vector_18+0x72>
	}
	else
	{
		RX_Head = tmpRXHead ;			// Save new pointer position
 17a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <RX_Head>
		RX_Buffer[tmpRXHead] = data;	// Save data in buffer
 17e:	e9 2f       	mov	r30, r25
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e2 5b       	subi	r30, 0xB2	; 178
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	20 83       	st	Z, r18
		
		// ELO Protocole handling
		if (data == '*')
 188:	2a 32       	cpi	r18, 0x2A	; 42
 18a:	19 f4       	brne	.+6      	; 0x192 <__vector_18+0x72>
		{
			Uart_SetELOEndCharDetected(0x01);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 8d 00 	call	0x11a	; 0x11a <Uart_SetELOEndCharDetected>
		}
	}
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <__vector_13>:
uint8_t overflowWhileMeasurement = 0;
uint8_t computeNewTimeBase = 0;


ISR(TIMER1_OVF_vect)
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	8f 93       	push	r24
	if (overflowWhileMeasurement == 0)
 1c4:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <overflowWhileMeasurement>
 1c8:	81 11       	cpse	r24, r1
 1ca:	09 c0       	rjmp	.+18     	; 0x1de <__vector_13+0x2a>
	{
		if (firstCapture != 0x0000)
 1cc:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <firstCapture>
 1d0:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <firstCapture+0x1>
 1d4:	23 2b       	or	r18, r19
 1d6:	19 f0       	breq	.+6      	; 0x1de <__vector_13+0x2a>
		{
			overflowWhileMeasurement++;
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <overflowWhileMeasurement>
	}
	else
	{
		/**/
	}
}
 1de:	8f 91       	pop	r24
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	0f 90       	pop	r0
 1e6:	0f be       	out	0x3f, r0	; 63
 1e8:	0f 90       	pop	r0
 1ea:	1f 90       	pop	r1
 1ec:	18 95       	reti

000001ee <__vector_10>:

ISR(TIMER1_CAPT_vect)
{	
 1ee:	1f 92       	push	r1
 1f0:	0f 92       	push	r0
 1f2:	0f b6       	in	r0, 0x3f	; 63
 1f4:	0f 92       	push	r0
 1f6:	11 24       	eor	r1, r1
 1f8:	2f 93       	push	r18
 1fa:	3f 93       	push	r19
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	cli();
 204:	f8 94       	cli
	
	if (firstCapture == 0x0000)
 206:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <firstCapture>
 20a:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <firstCapture+0x1>
 20e:	89 2b       	or	r24, r25
 210:	39 f5       	brne	.+78     	; 0x260 <__vector_10+0x72>
	{	
		firstCapture = ICR1;
 212:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 216:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 21a:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <firstCapture+0x1>
 21e:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <firstCapture>
		
		if (flag == 1)
 222:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <flag>
 226:	21 30       	cpi	r18, 0x01	; 1
 228:	51 f4       	brne	.+20     	; 0x23e <__vector_10+0x50>
		{
			actualTopValue2 = firstCapture - secondCapture;
 22a:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <secondCapture>
 22e:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <secondCapture+0x1>
 232:	82 1b       	sub	r24, r18
 234:	93 0b       	sbc	r25, r19
 236:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <actualTopValue2+0x1>
 23a:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <actualTopValue2>
		}
		
		if (actualTopValue < 0xFFFF)
 23e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 242:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	c1 f0       	breq	.+48     	; 0x27a <__vector_10+0x8c>
		{
			actualTopValue = 0xFFFF;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	9f ef       	ldi	r25, 0xFF	; 255
 24e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 252:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			OCR1A = 0xFFFF;
 256:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 25a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 25e:	0d c0       	rjmp	.+26     	; 0x27a <__vector_10+0x8c>
		}
	} 
	else
	{
		flag = 0;
 260:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <flag>
		secondCapture = ICR1;
 264:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 268:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 26c:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <secondCapture+0x1>
 270:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <secondCapture>
		computeNewTimeBase = 1;
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <computeNewTimeBase>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	8f e3       	ldi	r24, 0x3F	; 63
 27c:	9f e1       	ldi	r25, 0x1F	; 31
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <__vector_10+0x90>
 282:	00 c0       	rjmp	.+0      	; 0x284 <__vector_10+0x96>
 284:	00 00       	nop
	}
	
	_delay_ms(2);
	TCCR1B ^= (1 << ICES1);
 286:	e1 e8       	ldi	r30, 0x81	; 129
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	80 e4       	ldi	r24, 0x40	; 64
 28e:	89 27       	eor	r24, r25
 290:	80 83       	st	Z, r24
	TIFR1 |= (1 << ICF1);
 292:	86 b3       	in	r24, 0x16	; 22
 294:	80 62       	ori	r24, 0x20	; 32
 296:	86 bb       	out	0x16, r24	; 22
	sei();
 298:	78 94       	sei
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	3f 91       	pop	r19
 2a4:	2f 91       	pop	r18
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <Init_Timer>:

void Init_Timer (void)
{	
	OCR1A = actualTopValue;
 2b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1A = 0x00;
 2c0:	e0 e8       	ldi	r30, 0x80	; 128
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	10 82       	st	Z, r1
	TCCR1A |= (1 << COM1A0);
 2c6:	80 81       	ld	r24, Z
 2c8:	80 64       	ori	r24, 0x40	; 64
 2ca:	80 83       	st	Z, r24
	TCCR1B = 0x00;
 2cc:	e1 e8       	ldi	r30, 0x81	; 129
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	10 82       	st	Z, r1
	TCCR1B |= 0b11001101;
 2d2:	80 81       	ld	r24, Z
 2d4:	8d 6c       	ori	r24, 0xCD	; 205
 2d6:	80 83       	st	Z, r24
	
	TIMSK1 = 0x00;
 2d8:	ef e6       	ldi	r30, 0x6F	; 111
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	10 82       	st	Z, r1
	TIMSK1 |= ((1 << TOIE1) | (1 << ICIE1));
 2de:	80 81       	ld	r24, Z
 2e0:	81 62       	ori	r24, 0x21	; 33
 2e2:	80 83       	st	Z, r24
 2e4:	08 95       	ret

000002e6 <main>:
}


int main(void)
{
	DDRC = 0x01;
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	87 b9       	out	0x07, r24	; 7
	DDRB |= 0x02;
 2ea:	84 b1       	in	r24, 0x04	; 4
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	84 b9       	out	0x04, r24	; 4
	
	Init_Timer();
 2f0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Init_Timer>
	
	sei();
 2f4:	78 94       	sei
	
	while (1)
	{
		if(computeNewTimeBase != 0)
 2f6:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <computeNewTimeBase>
 2fa:	88 23       	and	r24, r24
 2fc:	e1 f3       	breq	.-8      	; 0x2f6 <main+0x10>
		{
			cli();
 2fe:	f8 94       	cli

			if (overflowWhileMeasurement <= 1)
 300:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <overflowWhileMeasurement>
 304:	82 30       	cpi	r24, 0x02	; 2
 306:	c8 f4       	brcc	.+50     	; 0x33a <main+0x54>
			{
				if (secondCapture > firstCapture)
 308:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <secondCapture>
 30c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <secondCapture+0x1>
 310:	20 91 9b 01 	lds	r18, 0x019B	; 0x80019b <firstCapture>
 314:	30 91 9c 01 	lds	r19, 0x019C	; 0x80019c <firstCapture+0x1>
 318:	28 17       	cp	r18, r24
 31a:	39 07       	cpc	r19, r25
 31c:	38 f4       	brcc	.+14     	; 0x32c <main+0x46>
				{
					actualTopValue = secondCapture - firstCapture;
 31e:	82 1b       	sub	r24, r18
 320:	93 0b       	sbc	r25, r19
 322:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 326:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 32a:	07 c0       	rjmp	.+14     	; 0x33a <main+0x54>
				} 
				else
				{
					actualTopValue = (0xFFFF - firstCapture) + secondCapture;
 32c:	82 1b       	sub	r24, r18
 32e:	93 0b       	sbc	r25, r19
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 336:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				}
			}
			
			OCR1A = actualTopValue2;
 33a:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <actualTopValue2>
 33e:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <actualTopValue2+0x1>
 342:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 346:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
			//TCNT1 = 0x0000;
			flag = 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <flag>
			firstCapture = 0;
 350:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <firstCapture+0x1>
 354:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <firstCapture>
			computeNewTimeBase = 0;
 358:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <computeNewTimeBase>
			overflowWhileMeasurement = 0;
 35c:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <overflowWhileMeasurement>
			sei();
 360:	78 94       	sei
 362:	c9 cf       	rjmp	.-110    	; 0x2f6 <main+0x10>

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
