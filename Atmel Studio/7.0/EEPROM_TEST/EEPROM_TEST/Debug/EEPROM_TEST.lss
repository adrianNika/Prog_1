
EEPROM_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800100  00800100  00000280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  000002f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fb4  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095d  00000000  00000000  000013bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000964  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00002680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ec  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f6  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003906  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 39       	cpi	r26, 0x92	; 146
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  9e:	0c 94 04 01 	jmp	0x208	; 0x208 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
	TX_Head = 0;
	TX_Tail = 0; 
	
	// returning ErrorUart (no-cost operation) 
	return ErrorUart;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TX_Tail>
  be:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <TX_Head>
  c2:	98 17       	cp	r25, r24
  c4:	d9 f0       	breq	.+54     	; 0xfc <__vector_19+0x56>
  c6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <TX_Tail>
  ca:	9f 5f       	subi	r25, 0xFF	; 255
  cc:	89 2f       	mov	r24, r25
  ce:	86 95       	lsr	r24
  d0:	2b ee       	ldi	r18, 0xEB	; 235
  d2:	82 9f       	mul	r24, r18
  d4:	81 2d       	mov	r24, r1
  d6:	11 24       	eor	r1, r1
  d8:	82 95       	swap	r24
  da:	86 95       	lsr	r24
  dc:	87 70       	andi	r24, 0x07	; 7
  de:	26 e4       	ldi	r18, 0x46	; 70
  e0:	82 9f       	mul	r24, r18
  e2:	90 19       	sub	r25, r0
  e4:	11 24       	eor	r1, r1
  e6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <TX_Tail>
  ea:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <TX_Tail>
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	ea 5f       	subi	r30, 0xFA	; 250
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	80 81       	ld	r24, Z
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <__vector_19+0x60>
  fc:	e1 ec       	ldi	r30, 0xC1	; 193
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	80 83       	st	Z, r24
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <Uart_SetELOEndCharDetected>:
 * @param  value Value of flag to be set
 * @return void
 */
void Uart_SetELOEndCharDetected(uint8_t value)
{
	EloEndCharDetected = value;
 11a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 11e:	08 95       	ret

00000120 <__vector_18>:
 * When interrupt occures, the new data has to be stored in circular buffer.
 * Head pointer increases, only if buffer is not full.
 *
*/
ISR(USART_RX_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	char data;			// Temporary (to empty UDR)
	uint8_t tmpRXHead;	// Temporary (for computations) 
	
	data = UDR_REG;		// empty UDR in temporary variable 
 142:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						// this permits to receive another data (avoid loss)
	
	tmpRXHead = RX_Head + 1;			// Increase position of tmp head 
 146:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <RX_Head>
 14a:	9f 5f       	subi	r25, 0xFF	; 255
	tmpRXHead %= UART_RX_BUFFER_SIZE;	// cycling buffer position if max reached
 14c:	89 2f       	mov	r24, r25
 14e:	86 95       	lsr	r24
 150:	eb ee       	ldi	r30, 0xEB	; 235
 152:	8e 9f       	mul	r24, r30
 154:	e1 2d       	mov	r30, r1
 156:	11 24       	eor	r1, r1
 158:	e2 95       	swap	r30
 15a:	e6 95       	lsr	r30
 15c:	e7 70       	andi	r30, 0x07	; 7
 15e:	86 e4       	ldi	r24, 0x46	; 70
 160:	e8 9f       	mul	r30, r24
 162:	90 19       	sub	r25, r0
 164:	11 24       	eor	r1, r1
	
	// Is RX_Buffer full ? 
	if (tmpRXHead == RX_Tail)
 166:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <RX_Tail>
 16a:	98 13       	cpse	r25, r24
 16c:	06 c0       	rjmp	.+12     	; 0x17a <__vector_18+0x5a>
	{
		// --> ERROR : RX Buffer is full 
		ErrorUart |= UART_ERROR_RX_BUFFER_FULL; // Buffer is full, handle exeption ! 
 16e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <ErrorUart>
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <ErrorUart>
 178:	0c c0       	rjmp	.+24     	; 0x192 <__vector_18+0x72>
	}
	else
	{
		RX_Head = tmpRXHead ;			// Save new pointer position
 17a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <RX_Head>
		RX_Buffer[tmpRXHead] = data;	// Save data in buffer
 17e:	e9 2f       	mov	r30, r25
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	e4 5b       	subi	r30, 0xB4	; 180
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	20 83       	st	Z, r18
		
		// ELO Protocole handling
		if (data == '*')
 188:	2a 32       	cpi	r18, 0x2A	; 42
 18a:	19 f4       	brne	.+6      	; 0x192 <__vector_18+0x72>
		{
			Uart_SetELOEndCharDetected(0x01);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 8d 00 	call	0x11a	; 0x11a <Uart_SetELOEndCharDetected>
		}
	}
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <main>:
#include <avr/eeprom.h>


int main(void)
{
	DDRC = 0x0F;
 1b4:	8f e0       	ldi	r24, 0x0F	; 15
 1b6:	87 b9       	out	0x07, r24	; 7
	DDRD = 0x0F;
 1b8:	8a b9       	out	0x0a, r24	; 10
	
	uint8_t value = 15;
	
	MCUSR = 0;
 1ba:	14 be       	out	0x34, r1	; 52
	
	eeprom_write_byte((uint8_t*) 0x0000, value);
 1bc:	6f e0       	ldi	r22, 0x0F	; 15
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 f6 00 	call	0x1ec	; 0x1ec <eeprom_write_byte>
	
    while (1) 
    {
		PORTD = eeprom_read_byte((uint8_t*) 0x0000);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 ee 00 	call	0x1dc	; 0x1dc <eeprom_read_byte>
 1ce:	8b b9       	out	0x0b, r24	; 11
		PORTC = eeprom_read_byte((uint8_t*) 0x0000);
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <eeprom_read_byte>
 1d8:	88 b9       	out	0x08, r24	; 8
 1da:	f5 cf       	rjmp	.-22     	; 0x1c6 <main+0x12>

000001dc <eeprom_read_byte>:
 1dc:	f9 99       	sbic	0x1f, 1	; 31
 1de:	fe cf       	rjmp	.-4      	; 0x1dc <eeprom_read_byte>
 1e0:	92 bd       	out	0x22, r25	; 34
 1e2:	81 bd       	out	0x21, r24	; 33
 1e4:	f8 9a       	sbi	0x1f, 0	; 31
 1e6:	99 27       	eor	r25, r25
 1e8:	80 b5       	in	r24, 0x20	; 32
 1ea:	08 95       	ret

000001ec <eeprom_write_byte>:
 1ec:	26 2f       	mov	r18, r22

000001ee <eeprom_write_r18>:
 1ee:	f9 99       	sbic	0x1f, 1	; 31
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <eeprom_write_r18>
 1f2:	1f ba       	out	0x1f, r1	; 31
 1f4:	92 bd       	out	0x22, r25	; 34
 1f6:	81 bd       	out	0x21, r24	; 33
 1f8:	20 bd       	out	0x20, r18	; 32
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	fa 9a       	sbi	0x1f, 2	; 31
 200:	f9 9a       	sbi	0x1f, 1	; 31
 202:	0f be       	out	0x3f, r0	; 63
 204:	01 96       	adiw	r24, 0x01	; 1
 206:	08 95       	ret

00000208 <_exit>:
 208:	f8 94       	cli

0000020a <__stop_program>:
 20a:	ff cf       	rjmp	.-2      	; 0x20a <__stop_program>
