
Timer-cligno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000071a  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000657  00000000  00000000  00000a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e2  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000385  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001755  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  88:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Timer_Start>:
}

/*NO select prescaler => NO CLOCK*/
void Timer_Stop(void)
{
	TCCR1B |= TIMER_STOP;
  90:	e1 e8       	ldi	r30, 0x81	; 129
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	81 60       	ori	r24, 0x01	; 1
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret

0000009c <Init_Timer>:
}

void Init_Timer(void)
{
	TCCR1A |= ((1 << COM1B1) | (1 << WGM11) | (1 << WGM10));
  9c:	e0 e8       	ldi	r30, 0x80	; 128
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	83 62       	ori	r24, 0x23	; 35
  a4:	80 83       	st	Z, r24
	
	TCCR1B |= ((1 << WGM13) | (1 << WGM12));
  a6:	e1 e8       	ldi	r30, 0x81	; 129
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	88 61       	ori	r24, 0x18	; 24
  ae:	80 83       	st	Z, r24
	TCCR1B |= (1 << ICNC1);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	TCCR1B |= (1 << ICES1);
  b6:	80 81       	ld	r24, Z
  b8:	80 64       	ori	r24, 0x40	; 64
  ba:	80 83       	st	Z, r24
	
	TIFR1 |= (1 << ICF1);
  bc:	86 b3       	in	r24, 0x16	; 22
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	86 bb       	out	0x16, r24	; 22
	TIFR1 |= (1 << TOV1);
  c2:	86 b3       	in	r24, 0x16	; 22
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	86 bb       	out	0x16, r24	; 22
	
	TIMSK1 |= (1 << ICIE1);
  c8:	ef e6       	ldi	r30, 0x6F	; 111
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	80 83       	st	Z, r24
	TIMSK1 |= (1 << TOIE1);
  d2:	80 81       	ld	r24, Z
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	80 83       	st	Z, r24
	
	ACSR |= (1 << ACIC);
  d8:	80 b7       	in	r24, 0x30	; 48
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	80 bf       	out	0x30, r24	; 48
	
	OCR1A = ICR1;
  de:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  e2:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0;
  ee:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	PORTD = 0x04;
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	8b b9       	out	0x0b, r24	; 11
  fa:	08 95       	ret

000000fc <__vector_13>:
}

ISR(TIMER1_OVF_vect)
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	3f 93       	push	r19
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
	if (ICR1 > 0)
 10e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 112:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 116:	89 2b       	or	r24, r25
 118:	09 f4       	brne	.+2      	; 0x11c <__vector_13+0x20>
 11a:	49 c0       	rjmp	.+146    	; 0x1ae <__vector_13+0xb2>
	{
		if (val < ICR1 && flag == 0)
 11c:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 120:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 124:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val>
 128:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val+0x1>
 12c:	82 17       	cp	r24, r18
 12e:	93 07       	cpc	r25, r19
 130:	80 f4       	brcc	.+32     	; 0x152 <__vector_13+0x56>
 132:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 136:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 13a:	23 2b       	or	r18, r19
 13c:	51 f4       	brne	.+20     	; 0x152 <__vector_13+0x56>
		{
			val++;
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val+0x1>
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val>
			OCR1B = val;
 148:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 14c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 150:	17 c0       	rjmp	.+46     	; 0x180 <__vector_13+0x84>
		}
		else if (val > ICR1 && flag == 1)
 152:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 156:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	80 f4       	brcc	.+32     	; 0x180 <__vector_13+0x84>
 160:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 164:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 168:	21 30       	cpi	r18, 0x01	; 1
 16a:	31 05       	cpc	r19, r1
 16c:	49 f4       	brne	.+18     	; 0x180 <__vector_13+0x84>
		{
			val--;
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val+0x1>
 174:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val>
			OCR1B = val;
 178:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 17c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
		}
		
		if (val == ICR1)
 180:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 184:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 188:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val>
 18c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val+0x1>
 190:	28 17       	cp	r18, r24
 192:	39 07       	cpc	r19, r25
 194:	31 f4       	brne	.+12     	; 0x1a2 <__vector_13+0xa6>
		{
			flag = 1;
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 19e:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
		}
		if (val == 1)
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	21 f4       	brne	.+8      	; 0x1ae <__vector_13+0xb2>
		{
			flag = 0;
 1a6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1aa:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
		}
	}
}
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	3f 91       	pop	r19
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <main>:


int main(void)
{
	DDRB = 0x04;
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	84 b9       	out	0x04, r24	; 4
	
	Init_Timer();
 1c4:	0e 94 4e 00 	call	0x9c	; 0x9c <Init_Timer>
	
	Timer_Start();
 1c8:	0e 94 48 00 	call	0x90	; 0x90 <Timer_Start>
	
	sei();
 1cc:	78 94       	sei
	
	while (1)
	{
		if(bit_is_set(PINB,0))
 1ce:	83 b1       	in	r24, 0x03	; 3
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <main+0xe>

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
