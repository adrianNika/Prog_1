
Timer-ascention.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006e5  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000657  00000000  00000000  0000096d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000279  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000374  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  00001618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000167b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  88:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Init_Timer>:
uint16_t val = 0;
uint16_t flag = 0;

void Init_Timer(void)
{
	TCCR1A |= ((1 << COM1A1) | (1 << WGM11));
  90:	e0 e8       	ldi	r30, 0x80	; 128
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	82 68       	ori	r24, 0x82	; 130
  98:	80 83       	st	Z, r24
	
	TCCR1B |= ((1 << WGM13) | (1 << WGM12) | (1 << CS10));
  9a:	e1 e8       	ldi	r30, 0x81	; 129
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	89 61       	ori	r24, 0x19	; 25
  a2:	80 83       	st	Z, r24
	
	TIMSK1 |= (1 << TOIE1);
  a4:	ef e6       	ldi	r30, 0x6F	; 111
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24
	
	ICR1 = 3500;
  ae:	8c ea       	ldi	r24, 0xAC	; 172
  b0:	9d e0       	ldi	r25, 0x0D	; 13
  b2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  b6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	OCR1A = 0;
  ba:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  be:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	
	DDRB |= (1<<PINB1);
  c2:	84 b1       	in	r24, 0x04	; 4
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	84 b9       	out	0x04, r24	; 4
  c8:	08 95       	ret

000000ca <__vector_13>:
}

ISR(TIMER1_OVF_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
	if (val < 3500 && flag == 0)
  dc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val>
  e0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val+0x1>
  e4:	8c 3a       	cpi	r24, 0xAC	; 172
  e6:	2d e0       	ldi	r18, 0x0D	; 13
  e8:	92 07       	cpc	r25, r18
  ea:	80 f4       	brcc	.+32     	; 0x10c <__vector_13+0x42>
  ec:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f0:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f4:	23 2b       	or	r18, r19
  f6:	51 f4       	brne	.+20     	; 0x10c <__vector_13+0x42>
	{
		val++;
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val+0x1>
  fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val>
		OCR1A = val;
 102:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 106:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 10a:	12 c0       	rjmp	.+36     	; 0x130 <__vector_13+0x66>
	}
	else if (val > 0 && flag == 1)
 10c:	00 97       	sbiw	r24, 0x00	; 0
 10e:	81 f0       	breq	.+32     	; 0x130 <__vector_13+0x66>
 110:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 114:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 118:	21 30       	cpi	r18, 0x01	; 1
 11a:	31 05       	cpc	r19, r1
 11c:	49 f4       	brne	.+18     	; 0x130 <__vector_13+0x66>
	{
		val--;
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <val+0x1>
 124:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <val>
		OCR1A = val;
 128:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 12c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	}
		
	if (val == 3500)
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <val>
 134:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <val+0x1>
 138:	8c 3a       	cpi	r24, 0xAC	; 172
 13a:	2d e0       	ldi	r18, 0x0D	; 13
 13c:	92 07       	cpc	r25, r18
 13e:	31 f4       	brne	.+12     	; 0x14c <__vector_13+0x82>
	{
		flag = 1;
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 148:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	if(val == 0)
 14c:	89 2b       	or	r24, r25
 14e:	21 f4       	brne	.+8      	; 0x158 <__vector_13+0x8e>
	{
		flag = 0;
 150:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 154:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	3f 91       	pop	r19
 15e:	2f 91       	pop	r18
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <main>:


int main(void)
{
	Init_Timer();
 16a:	0e 94 48 00 	call	0x90	; 0x90 <Init_Timer>
	sei();
 16e:	78 94       	sei
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0x6>

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
