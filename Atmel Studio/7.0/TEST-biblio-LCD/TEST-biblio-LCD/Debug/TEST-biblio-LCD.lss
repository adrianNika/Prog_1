
TEST-biblio-LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000006ac  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a2  00800116  00800116  00000756  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000756  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fbd  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d37  00000000  00000000  000028f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f0a  00000000  00000000  00003628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00004534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009cf  00000000  00000000  00004998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001259  00000000  00000000  00005367  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000065c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 90 00 	jmp	0x120	; 0x120 <__vector_18>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_24>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 3b       	cpi	r26, 0xB8	; 184
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 75 02 	call	0x4ea	; 0x4ea <main>
  9e:	0c 94 54 03 	jmp	0x6a8	; 0x6a8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_19>:
	TX_Head = 0;
	TX_Tail = 0; 
	
	// returning ErrorUart (no-cost operation) 
	return ErrorUart;
}
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
  ba:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <TX_Tail>
  be:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <TX_Head>
  c2:	98 17       	cp	r25, r24
  c4:	d9 f0       	breq	.+54     	; 0xfc <__vector_19+0x56>
  c6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <TX_Tail>
  ca:	9f 5f       	subi	r25, 0xFF	; 255
  cc:	89 2f       	mov	r24, r25
  ce:	86 95       	lsr	r24
  d0:	2b ee       	ldi	r18, 0xEB	; 235
  d2:	82 9f       	mul	r24, r18
  d4:	81 2d       	mov	r24, r1
  d6:	11 24       	eor	r1, r1
  d8:	82 95       	swap	r24
  da:	86 95       	lsr	r24
  dc:	87 70       	andi	r24, 0x07	; 7
  de:	26 e4       	ldi	r18, 0x46	; 70
  e0:	82 9f       	mul	r24, r18
  e2:	90 19       	sub	r25, r0
  e4:	11 24       	eor	r1, r1
  e6:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <TX_Tail>
  ea:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <TX_Tail>
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	e4 5e       	subi	r30, 0xE4	; 228
  f2:	fe 4f       	sbci	r31, 0xFE	; 254
  f4:	80 81       	ld	r24, Z
  f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <__vector_19+0x60>
  fc:	e1 ec       	ldi	r30, 0xC1	; 193
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8f 7d       	andi	r24, 0xDF	; 223
 104:	80 83       	st	Z, r24
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <Uart_SetELOEndCharDetected>:
 * @param  value Value of flag to be set
 * @return void
 */
void Uart_SetELOEndCharDetected(uint8_t value)
{
	EloEndCharDetected = value;
 11a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 11e:	08 95       	ret

00000120 <__vector_18>:
 * When interrupt occures, the new data has to be stored in circular buffer.
 * Head pointer increases, only if buffer is not full.
 *
*/
ISR(USART_RX_vect)
{
 120:	1f 92       	push	r1
 122:	0f 92       	push	r0
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	0f 92       	push	r0
 128:	11 24       	eor	r1, r1
 12a:	2f 93       	push	r18
 12c:	3f 93       	push	r19
 12e:	4f 93       	push	r20
 130:	5f 93       	push	r21
 132:	6f 93       	push	r22
 134:	7f 93       	push	r23
 136:	8f 93       	push	r24
 138:	9f 93       	push	r25
 13a:	af 93       	push	r26
 13c:	bf 93       	push	r27
 13e:	ef 93       	push	r30
 140:	ff 93       	push	r31
	char data;			// Temporary (to empty UDR)
	uint8_t tmpRXHead;	// Temporary (for computations) 
	
	data = UDR_REG;		// empty UDR in temporary variable 
 142:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
						// this permits to receive another data (avoid loss)
	
	tmpRXHead = RX_Head + 1;			// Increase position of tmp head 
 146:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <RX_Head>
 14a:	9f 5f       	subi	r25, 0xFF	; 255
	tmpRXHead %= UART_RX_BUFFER_SIZE;	// cycling buffer position if max reached
 14c:	89 2f       	mov	r24, r25
 14e:	86 95       	lsr	r24
 150:	eb ee       	ldi	r30, 0xEB	; 235
 152:	8e 9f       	mul	r24, r30
 154:	e1 2d       	mov	r30, r1
 156:	11 24       	eor	r1, r1
 158:	e2 95       	swap	r30
 15a:	e6 95       	lsr	r30
 15c:	e7 70       	andi	r30, 0x07	; 7
 15e:	86 e4       	ldi	r24, 0x46	; 70
 160:	e8 9f       	mul	r30, r24
 162:	90 19       	sub	r25, r0
 164:	11 24       	eor	r1, r1
	
	// Is RX_Buffer full ? 
	if (tmpRXHead == RX_Tail)
 166:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <RX_Tail>
 16a:	98 13       	cpse	r25, r24
 16c:	06 c0       	rjmp	.+12     	; 0x17a <__vector_18+0x5a>
	{
		// --> ERROR : RX Buffer is full 
		ErrorUart |= UART_ERROR_RX_BUFFER_FULL; // Buffer is full, handle exeption ! 
 16e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ErrorUart>
 172:	82 60       	ori	r24, 0x02	; 2
 174:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <ErrorUart>
 178:	0c c0       	rjmp	.+24     	; 0x192 <__vector_18+0x72>
	}
	else
	{
		RX_Head = tmpRXHead ;			// Save new pointer position
 17a:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <RX_Head>
		RX_Buffer[tmpRXHead] = data;	// Save data in buffer
 17e:	e9 2f       	mov	r30, r25
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	ee 59       	subi	r30, 0x9E	; 158
 184:	fe 4f       	sbci	r31, 0xFE	; 254
 186:	20 83       	st	Z, r18
		
		// ELO Protocole handling
		if (data == '*')
 188:	2a 32       	cpi	r18, 0x2A	; 42
 18a:	19 f4       	brne	.+6      	; 0x192 <__vector_18+0x72>
		{
			Uart_SetELOEndCharDetected(0x01);
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 8d 00 	call	0x11a	; 0x11a <Uart_SetELOEndCharDetected>
		}
	}
}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	7f 91       	pop	r23
 1a0:	6f 91       	pop	r22
 1a2:	5f 91       	pop	r21
 1a4:	4f 91       	pop	r20
 1a6:	3f 91       	pop	r19
 1a8:	2f 91       	pop	r18
 1aa:	0f 90       	pop	r0
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	0f 90       	pop	r0
 1b0:	1f 90       	pop	r1
 1b2:	18 95       	reti

000001b4 <LCD_Strobe_E>:
	return ErrorLCD;
}

/*fait une pulse E pour l'evois des données enregistrer*/
void LCD_Strobe_E(void)
{
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	9e e4       	ldi	r25, 0x4E	; 78
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Strobe_E+0x8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Strobe_E+0xe>
 1c2:	00 00       	nop
	_delay_ms(5);
	lcdCtrl.PcfRegs.enableBit = 1;
 1c4:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <lcdCtrl>
 1c8:	84 60       	ori	r24, 0x04	; 4
 1ca:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
	i2cLcd.S_MsgSplit.Message[0] = lcdCtrl.pcfByte;
 1ce:	c5 eb       	ldi	r28, 0xB5	; 181
 1d0:	d1 e0       	ldi	r29, 0x01	; 1
 1d2:	89 83       	std	Y+1, r24	; 0x01
	TWIMaster_SendMsg(i2cLcd.MsgBuffer, 2);
 1d4:	62 e0       	ldi	r22, 0x02	; 2
 1d6:	ce 01       	movw	r24, r28
 1d8:	0e 94 b3 02 	call	0x566	; 0x566 <TWIMaster_SendMsg>
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCD_Strobe_E+0x2c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <LCD_Strobe_E+0x32>
 1e6:	00 00       	nop
	_delay_ms(5);
	lcdCtrl.PcfRegs.enableBit = 0;
 1e8:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <lcdCtrl>
 1ec:	8b 7f       	andi	r24, 0xFB	; 251
 1ee:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
	i2cLcd.S_MsgSplit.Message[0] = lcdCtrl.pcfByte;
 1f2:	89 83       	std	Y+1, r24	; 0x01
	TWIMaster_SendMsg(i2cLcd.MsgBuffer, 2);
 1f4:	62 e0       	ldi	r22, 0x02	; 2
 1f6:	ce 01       	movw	r24, r28
 1f8:	0e 94 b3 02 	call	0x566	; 0x566 <TWIMaster_SendMsg>
 1fc:	8f e1       	ldi	r24, 0x1F	; 31
 1fe:	9e e4       	ldi	r25, 0x4E	; 78
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCD_Strobe_E+0x4c>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_Strobe_E+0x52>
 206:	00 00       	nop
	_delay_ms(5);
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <LCD_Init>:
/*cursor ON/OFF 0=pas de cursor 1=avec cursor*/
/*Blliking ON/OFF 0=pas de bliking 1=avec bliking*/
/*cursor decrement ou incrment 0=dec 1=inc*/
/*l'adresse corespondant au slave*/
uint8_t LCD_Init(uint8_t initLCD, uint8_t slaveAdrr)
{
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
 21a:	2e 97       	sbiw	r28, 0x0e	; 14
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	f8 94       	cli
 220:	de bf       	out	0x3e, r29	; 62
 222:	0f be       	out	0x3f, r0	; 63
 224:	cd bf       	out	0x3d, r28	; 61
	ctrlInit.byte = initLCD;
 226:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <ctrlInit>
	
	if (ctrlInit.byte > 15)
 22a:	80 31       	cpi	r24, 0x10	; 16
 22c:	28 f0       	brcs	.+10     	; 0x238 <LCD_Init+0x2a>
	{
		ErrorLCD |= ERROR_INIT;
 22e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ErrorLCD>
 232:	81 60       	ori	r24, 0x01	; 1
 234:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <ErrorLCD>
	}
	
	if (ErrorLCD == 0)
 238:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ErrorLCD>
 23c:	81 11       	cpse	r24, r1
 23e:	80 c0       	rjmp	.+256    	; 0x340 <LCD_Init+0x132>
	{
		lcdCtrl.PcfRegs.rsBit = 0;
 240:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <lcdCtrl>
 244:	8e 7f       	andi	r24, 0xFE	; 254
 246:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
		
		/*valeur union action init*/
		ctrlLine.S_Set_Line.nbLine = ctrlInit.S_LCDInit.nb_line;
 24a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <ctrlInit>
 24e:	93 fb       	bst	r25, 3
 250:	22 27       	eor	r18, r18
 252:	20 f9       	bld	r18, 0
 254:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <ctrlLine>
 258:	20 fb       	bst	r18, 0
 25a:	83 f9       	bld	r24, 3
 25c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <ctrlLine>
		
		ctrlCursor.S_setCursor.blikingSet = ctrlInit.S_LCDInit.bliking_Set;
 260:	91 fb       	bst	r25, 1
 262:	22 27       	eor	r18, r18
 264:	20 f9       	bld	r18, 0
 266:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <ctrlCursor>
 26a:	20 fb       	bst	r18, 0
 26c:	80 f9       	bld	r24, 0
		ctrlCursor.S_setCursor.cursorSet = ctrlInit.S_LCDInit.cursor_set;
 26e:	92 fb       	bst	r25, 2
 270:	22 27       	eor	r18, r18
 272:	20 f9       	bld	r18, 0
 274:	20 fb       	bst	r18, 0
 276:	81 f9       	bld	r24, 1
		ctrlCursor.S_setCursor.displayOn = 1;
		ctrlCursor.S_setCursor.isone = 1;
 278:	84 60       	ori	r24, 0x04	; 4
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <ctrlCursor>
		
		ctrlDisplay.S_setDiplay.isZero1 = 0;
 280:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ctrlDisplay>
		ctrlDisplay.S_setDiplay.cursorIncDec = ctrlInit.S_LCDInit.incDec_cursor;
 284:	8e 7f       	andi	r24, 0xFE	; 254
 286:	90 fb       	bst	r25, 0
 288:	81 f9       	bld	r24, 1
		ctrlDisplay.S_setDiplay.isone = 1;
		ctrlDisplay.S_setDiplay.isZero2 = 0;
 28a:	84 60       	ori	r24, 0x04	; 4
 28c:	87 7f       	andi	r24, 0xF7	; 247
 28e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <ctrlDisplay>
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	81 ee       	ldi	r24, 0xE1	; 225
 296:	94 e0       	ldi	r25, 0x04	; 4
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <LCD_Init+0x8a>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_Init+0x94>
 2a2:	00 00       	nop
		
		/* Start-up delay */
		_delay_ms(100);
		
		/* Initialize with adress */
		i2cLcd.S_MsgSplit.SlaveAdress = slaveAdrr;
 2a4:	e5 eb       	ldi	r30, 0xB5	; 181
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	66 0f       	add	r22, r22
 2aa:	80 81       	ld	r24, Z
 2ac:	81 70       	andi	r24, 0x01	; 1
		i2cLcd.S_MsgSplit.ReadWriteBit = TWI_WRITE;
 2ae:	68 2b       	or	r22, r24
 2b0:	6e 7f       	andi	r22, 0xFE	; 254
 2b2:	60 83       	st	Z, r22
		
		/* Initialize with LCD data*/
		lcdCtrl.PcfRegs.rsBit = 0;
 2b4:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <lcdCtrl>
		lcdCtrl.PcfRegs.rwBit = 0;
		lcdCtrl.PcfRegs.enableBit = 0;
		lcdCtrl.PcfRegs.backlight = 1;
 2b8:	88 7f       	andi	r24, 0xF8	; 248
 2ba:	88 60       	ori	r24, 0x08	; 8
		lcdCtrl.PcfRegs.data = 0;
 2bc:	8f 70       	andi	r24, 0x0F	; 15
 2be:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
		
		/*all data init*/
		uint8_t buffer_Data[] = {	0x03,
 2c2:	83 e0       	ldi	r24, 0x03	; 3
 2c4:	89 83       	std	Y+1, r24	; 0x01
 2c6:	8a 83       	std	Y+2, r24	; 0x02
 2c8:	8b 83       	std	Y+3, r24	; 0x03
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	8c 83       	std	Y+4, r24	; 0x04
 2ce:	8d 83       	std	Y+5, r24	; 0x05
									0x03,
									0x03,
									0x02,
									0x02,
									ctrlLine.byte,
 2d0:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <ctrlLine>
		lcdCtrl.PcfRegs.enableBit = 0;
		lcdCtrl.PcfRegs.backlight = 1;
		lcdCtrl.PcfRegs.data = 0;
		
		/*all data init*/
		uint8_t buffer_Data[] = {	0x03,
 2d4:	8e 83       	std	Y+6, r24	; 0x06
 2d6:	1f 82       	std	Y+7, r1	; 0x07
 2d8:	88 e0       	ldi	r24, 0x08	; 8
 2da:	88 87       	std	Y+8, r24	; 0x08
 2dc:	19 86       	std	Y+9, r1	; 0x09
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	8a 87       	std	Y+10, r24	; 0x0a
 2e2:	1b 86       	std	Y+11, r1	; 0x0b
									0x00,
									0x08,
									0x00,
									0x01,
									0x00,
									ctrlDisplay.byte,
 2e4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <ctrlDisplay>
		lcdCtrl.PcfRegs.enableBit = 0;
		lcdCtrl.PcfRegs.backlight = 1;
		lcdCtrl.PcfRegs.data = 0;
		
		/*all data init*/
		uint8_t buffer_Data[] = {	0x03,
 2e8:	8c 87       	std	Y+12, r24	; 0x0c
 2ea:	1d 86       	std	Y+13, r1	; 0x0d
									0x00,
									0x01,
									0x00,
									ctrlDisplay.byte,
									0x00,
									ctrlCursor.byte};
 2ec:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <ctrlCursor>
		lcdCtrl.PcfRegs.enableBit = 0;
		lcdCtrl.PcfRegs.backlight = 1;
		lcdCtrl.PcfRegs.data = 0;
		
		/*all data init*/
		uint8_t buffer_Data[] = {	0x03,
 2f0:	8e 87       	std	Y+14, r24	; 0x0e
									ctrlDisplay.byte,
									0x00,
									ctrlCursor.byte};
		
		/*send all data init*/
		for (int i = 0; i < 14; i++)
 2f2:	00 e0       	ldi	r16, 0x00	; 0
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	21 c0       	rjmp	.+66     	; 0x33a <LCD_Init+0x12c>
		{
			lcdCtrl.PcfRegs.data = buffer_Data[i];
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	e0 0f       	add	r30, r16
 302:	f1 1f       	adc	r31, r17
 304:	80 81       	ld	r24, Z
 306:	98 2f       	mov	r25, r24
 308:	92 95       	swap	r25
 30a:	90 7f       	andi	r25, 0xF0	; 240
 30c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <lcdCtrl>
 310:	8f 70       	andi	r24, 0x0F	; 15
 312:	89 2b       	or	r24, r25
 314:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
			i2cLcd.S_MsgSplit.Message[0] = lcdCtrl.pcfByte;
 318:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <i2cLcd+0x1>
			TWIMaster_SendMsg(i2cLcd.MsgBuffer, 2);
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	85 eb       	ldi	r24, 0xB5	; 181
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	0e 94 b3 02 	call	0x566	; 0x566 <TWIMaster_SendMsg>
 326:	8f e3       	ldi	r24, 0x3F	; 63
 328:	9c e9       	ldi	r25, 0x9C	; 156
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_Init+0x11c>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_Init+0x122>
 330:	00 00       	nop
			_delay_ms(10);
			LCD_Strobe_E();
 332:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Strobe_E>
									ctrlDisplay.byte,
									0x00,
									ctrlCursor.byte};
		
		/*send all data init*/
		for (int i = 0; i < 14; i++)
 336:	0f 5f       	subi	r16, 0xFF	; 255
 338:	1f 4f       	sbci	r17, 0xFF	; 255
 33a:	0e 30       	cpi	r16, 0x0E	; 14
 33c:	11 05       	cpc	r17, r1
 33e:	e4 f2       	brlt	.-72     	; 0x2f8 <LCD_Init+0xea>
			_delay_ms(10);
			LCD_Strobe_E();
		}
	}
	
	return ErrorLCD;
 340:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ErrorLCD>
}
 344:	2e 96       	adiw	r28, 0x0e	; 14
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	08 95       	ret

0000035a <LCD_PutChar>:

/*affiche un char*/
uint8_t LCD_PutChar(char C)
{
 35a:	0f 93       	push	r16
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
	
	uint8_t high_Value = 0;
	uint8_t low_Value = 0;
	
	/*valeur max de la ligne atteint*/
	if (actual_Val_Cursor == MAXCHAR)
 360:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <actual_Val_Cursor>
 364:	90 31       	cpi	r25, 0x10	; 16
 366:	29 f4       	brne	.+10     	; 0x372 <LCD_PutChar+0x18>
	{
		ErrorLCD |= ERROR_HIGH_LENGH_CHAR;
 368:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <ErrorLCD>
 36c:	94 60       	ori	r25, 0x04	; 4
 36e:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <ErrorLCD>
	}
	
	if (ErrorLCD == 0)
 372:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <ErrorLCD>
 376:	91 11       	cpse	r25, r1
 378:	36 c0       	rjmp	.+108    	; 0x3e6 <LCD_PutChar+0x8c>
 37a:	c8 2f       	mov	r28, r24
	{
		actual_Val_Cursor++;
 37c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <actual_Val_Cursor>
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <actual_Val_Cursor>
		/*avoir la data nible poids fort sur le nible de piods faible ex:0x41 -> 0x04*/
		high_Value = (int)C >> 4;
		
		lcdCtrl.PcfRegs.rsBit = 1;
 386:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <lcdCtrl>
 38a:	81 60       	ori	r24, 0x01	; 1
		lcdCtrl.PcfRegs.data = high_Value;
 38c:	9c 2f       	mov	r25, r28
 38e:	90 7f       	andi	r25, 0xF0	; 240
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	89 2b       	or	r24, r25
 394:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
		i2cLcd.S_MsgSplit.Message[0] = lcdCtrl.pcfByte;
 398:	05 eb       	ldi	r16, 0xB5	; 181
 39a:	11 e0       	ldi	r17, 0x01	; 1
 39c:	f8 01       	movw	r30, r16
 39e:	81 83       	std	Z+1, r24	; 0x01
		TWIMaster_SendMsg(i2cLcd.MsgBuffer, 2);
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	c8 01       	movw	r24, r16
 3a4:	0e 94 b3 02 	call	0x566	; 0x566 <TWIMaster_SendMsg>
 3a8:	8f e1       	ldi	r24, 0x1F	; 31
 3aa:	9e e4       	ldi	r25, 0x4E	; 78
 3ac:	01 97       	sbiw	r24, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_PutChar+0x52>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <LCD_PutChar+0x58>
 3b2:	00 00       	nop
		_delay_ms(5);
		LCD_Strobe_E();
 3b4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Strobe_E>
		
		/*avoir que le nible de poids faible ex: 0x41 - 0x40 = 0x01*/
		low_Value = (int)C - (high_Value << 4);
		
		lcdCtrl.PcfRegs.data = low_Value;
 3b8:	8c 2f       	mov	r24, r28
 3ba:	82 95       	swap	r24
 3bc:	80 7f       	andi	r24, 0xF0	; 240
 3be:	c0 91 b3 01 	lds	r28, 0x01B3	; 0x8001b3 <lcdCtrl>
 3c2:	cf 70       	andi	r28, 0x0F	; 15
 3c4:	8c 2b       	or	r24, r28
 3c6:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
		i2cLcd.S_MsgSplit.Message[0] = lcdCtrl.pcfByte;
 3ca:	f8 01       	movw	r30, r16
 3cc:	81 83       	std	Z+1, r24	; 0x01
		TWIMaster_SendMsg(i2cLcd.MsgBuffer, 2);
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	c8 01       	movw	r24, r16
 3d2:	0e 94 b3 02 	call	0x566	; 0x566 <TWIMaster_SendMsg>
 3d6:	8f e1       	ldi	r24, 0x1F	; 31
 3d8:	9e e4       	ldi	r25, 0x4E	; 78
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_PutChar+0x80>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_PutChar+0x86>
 3e0:	00 00       	nop
		_delay_ms(5);
		LCD_Strobe_E();
 3e2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Strobe_E>
	}				
	
	return ErrorLCD;				
 3e6:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ErrorLCD>
}
 3ea:	cf 91       	pop	r28
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	08 95       	ret

000003f2 <LCD_PutString>:

/*afficher une string*/
uint8_t LCD_PutString(char *string)
{	
 3f2:	ef 92       	push	r14
 3f4:	ff 92       	push	r15
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	7c 01       	movw	r14, r24
	/*savoir le nombre de char*/
	uint8_t strLength = strlen((const char *) string);
 400:	fc 01       	movw	r30, r24
 402:	01 90       	ld	r0, Z+
 404:	00 20       	and	r0, r0
 406:	e9 f7       	brne	.-6      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 408:	31 97       	sbiw	r30, 0x01	; 1
 40a:	8f 01       	movw	r16, r30
 40c:	08 1b       	sub	r16, r24
 40e:	19 0b       	sbc	r17, r25
	
	/*envois char par char*/
	for (int i = 0; i < strLength; i++)
 410:	c0 e0       	ldi	r28, 0x00	; 0
 412:	d0 e0       	ldi	r29, 0x00	; 0
 414:	07 c0       	rjmp	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
	{
		LCD_PutChar(string[i]);
 416:	f7 01       	movw	r30, r14
 418:	ec 0f       	add	r30, r28
 41a:	fd 1f       	adc	r31, r29
 41c:	80 81       	ld	r24, Z
 41e:	0e 94 ad 01 	call	0x35a	; 0x35a <LCD_PutChar>
{	
	/*savoir le nombre de char*/
	uint8_t strLength = strlen((const char *) string);
	
	/*envois char par char*/
	for (int i = 0; i < strLength; i++)
 422:	21 96       	adiw	r28, 0x01	; 1
 424:	c8 01       	movw	r24, r16
 426:	99 27       	eor	r25, r25
 428:	c8 17       	cp	r28, r24
 42a:	d9 07       	cpc	r29, r25
 42c:	a4 f3       	brlt	.-24     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{
		LCD_PutChar(string[i]);
	}
	return ErrorLCD;
 42e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ErrorLCD>
}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	08 95       	ret

00000440 <LCD_setCursor>:

/*permet de set le cursor en position X et y (ou ligne et colonne)*/
uint8_t LCD_setCursor(uint8_t lin, uint8_t col)
{	
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	c6 2f       	mov	r28, r22
	if (lin > 1)
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	28 f0       	brcs	.+10     	; 0x456 <LCD_setCursor+0x16>
	{
		ErrorLCD |= ERROR_CURSOR;
 44c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <ErrorLCD>
 450:	92 60       	ori	r25, 0x02	; 2
 452:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <ErrorLCD>
	}
	if (col < 0 || lin > 15)
 456:	80 31       	cpi	r24, 0x10	; 16
 458:	28 f0       	brcs	.+10     	; 0x464 <LCD_setCursor+0x24>
	{
		ErrorLCD |= ERROR_CURSOR;
 45a:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <ErrorLCD>
 45e:	92 60       	ori	r25, 0x02	; 2
 460:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <ErrorLCD>
	}
	
	if (ErrorLCD == 0)
 464:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <ErrorLCD>
 468:	91 11       	cpse	r25, r1
 46a:	39 c0       	rjmp	.+114    	; 0x4de <LCD_setCursor+0x9e>
	{
		lcdCtrl.PcfRegs.rsBit = 0;
 46c:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <lcdCtrl>
 470:	9e 7f       	andi	r25, 0xFE	; 254
 472:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <lcdCtrl>
		uint8_t valueCol = col;
		actual_Val_Cursor = col;
 476:	c0 93 a8 01 	sts	0x01A8, r28	; 0x8001a8 <actual_Val_Cursor>
		uint8_t valueLin = lin;
	
		/*pour afficher sur la ligne du bas l'adresse commence par 0x4X*/
		if (valueLin == 1)
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	09 f4       	brne	.+2      	; 0x480 <LCD_setCursor+0x40>
		{
			/*0x04 pour utilisation de l'union*/
			valueLin = 0x04;
 47e:	84 e0       	ldi	r24, 0x04	; 4
					2		-  -  -   1   0   0   x   x   x   x 
		1 = l'adresse a voir dans la datasheet
		2 = la partie de l'adresse corespondant a la ligne 2 de l'écran
		le DB7  a 1 et important pour set le cursor a l'endroit voulu */
		/*+ 0x08 (-> DB7) pour avoir l'aresse complet*/
		lcdCtrl.PcfRegs.data = valueLin + 0x08;
 480:	88 5f       	subi	r24, 0xF8	; 248
 482:	82 95       	swap	r24
 484:	80 7f       	andi	r24, 0xF0	; 240
 486:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <lcdCtrl>
 48a:	9f 70       	andi	r25, 0x0F	; 15
 48c:	89 2b       	or	r24, r25
 48e:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <lcdCtrl>
		i2cLcd.S_MsgSplit.Message[0] = lcdCtrl.pcfByte;
 492:	05 eb       	ldi	r16, 0xB5	; 181
 494:	11 e0       	ldi	r17, 0x01	; 1
 496:	f8 01       	movw	r30, r16
 498:	81 83       	std	Z+1, r24	; 0x01
		TWIMaster_SendMsg(i2cLcd.MsgBuffer, 2);
 49a:	62 e0       	ldi	r22, 0x02	; 2
 49c:	c8 01       	movw	r24, r16
 49e:	0e 94 b3 02 	call	0x566	; 0x566 <TWIMaster_SendMsg>
 4a2:	8f e1       	ldi	r24, 0x1F	; 31
 4a4:	9e e4       	ldi	r25, 0x4E	; 78
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	f1 f7       	brne	.-4      	; 0x4a6 <LCD_setCursor+0x66>
 4aa:	00 c0       	rjmp	.+0      	; 0x4ac <LCD_setCursor+0x6c>
 4ac:	00 00       	nop
		_delay_ms(5);
		LCD_Strobe_E();
 4ae:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Strobe_E>
	
		lcdCtrl.PcfRegs.data = valueCol;
 4b2:	c2 95       	swap	r28
 4b4:	c0 7f       	andi	r28, 0xF0	; 240
 4b6:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <lcdCtrl>
 4ba:	8f 70       	andi	r24, 0x0F	; 15
 4bc:	c8 2b       	or	r28, r24
 4be:	c0 93 b3 01 	sts	0x01B3, r28	; 0x8001b3 <lcdCtrl>
		i2cLcd.S_MsgSplit.Message[0] = lcdCtrl.pcfByte;
 4c2:	f8 01       	movw	r30, r16
 4c4:	c1 83       	std	Z+1, r28	; 0x01
		TWIMaster_SendMsg(i2cLcd.MsgBuffer, 2);
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	c8 01       	movw	r24, r16
 4ca:	0e 94 b3 02 	call	0x566	; 0x566 <TWIMaster_SendMsg>
 4ce:	8f e1       	ldi	r24, 0x1F	; 31
 4d0:	9e e4       	ldi	r25, 0x4E	; 78
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <LCD_setCursor+0x92>
 4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <LCD_setCursor+0x98>
 4d8:	00 00       	nop
		_delay_ms(5);
		LCD_Strobe_E();
 4da:	0e 94 da 00 	call	0x1b4	; 0x1b4 <LCD_Strobe_E>
	}
	
	return ErrorLCD;
 4de:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ErrorLCD>
}
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <main>:
#include "LCD_I2C.h"
#include "TWI_Master.h"


int main(void)
{
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	cd b7       	in	r28, 0x3d	; 61
 4f0:	de b7       	in	r29, 0x3e	; 62
 4f2:	28 97       	sbiw	r28, 0x08	; 8
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	f8 94       	cli
 4f8:	de bf       	out	0x3e, r29	; 62
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	cd bf       	out	0x3d, r28	; 61
	uint8_t test = 0;
	TWIMaster_Init();
 4fe:	0e 94 a0 02 	call	0x540	; 0x540 <TWIMaster_Init>
	sei();
 502:	78 94       	sei
	
	test = LCD_Init(0x0F,0x25);
 504:	65 e2       	ldi	r22, 0x25	; 37
 506:	8f e0       	ldi	r24, 0x0F	; 15
 508:	0e 94 07 01 	call	0x20e	; 0x20e <LCD_Init>
	
	LCD_setCursor(0 , 5);
 50c:	65 e0       	ldi	r22, 0x05	; 5
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 20 02 	call	0x440	; 0x440 <LCD_setCursor>
	
	char str[] = "Bonjour";
 514:	88 e0       	ldi	r24, 0x08	; 8
 516:	ed e0       	ldi	r30, 0x0D	; 13
 518:	f1 e0       	ldi	r31, 0x01	; 1
 51a:	de 01       	movw	r26, r28
 51c:	11 96       	adiw	r26, 0x01	; 1
 51e:	01 90       	ld	r0, Z+
 520:	0d 92       	st	X+, r0
 522:	8a 95       	dec	r24
 524:	e1 f7       	brne	.-8      	; 0x51e <main+0x34>
	
    /* Replace with your application code */
    while (1) 
    {
		LCD_PutString(str);
 526:	ce 01       	movw	r24, r28
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_PutString>
		
		LCD_setCursor(1,2);
 52e:	62 e0       	ldi	r22, 0x02	; 2
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 20 02 	call	0x440	; 0x440 <LCD_setCursor>
		LCD_PutString("et Bienvenue");
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <LCD_PutString>
 53e:	ff cf       	rjmp	.-2      	; 0x53e <main+0x54>

00000540 <TWIMaster_Init>:
}

U_TWI_Status TWI_GetTransmitStatus (void)
{
	return TWI_StatusTxRx;
}
 540:	e9 eb       	ldi	r30, 0xB9	; 185
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	8c 7f       	andi	r24, 0xFC	; 252
 548:	80 83       	st	Z, r24
 54a:	80 81       	ld	r24, Z
 54c:	80 83       	st	Z, r24
 54e:	80 e2       	ldi	r24, 0x20	; 32
 550:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 554:	8f ef       	ldi	r24, 0xFF	; 255
 556:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 55a:	ec eb       	ldi	r30, 0xBC	; 188
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	10 82       	st	Z, r1
 560:	84 e0       	ldi	r24, 0x04	; 4
 562:	80 83       	st	Z, r24
 564:	08 95       	ret

00000566 <TWIMaster_SendMsg>:
 566:	fc 01       	movw	r30, r24
 568:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <TWI_MsgSize>
 56c:	80 81       	ld	r24, Z
 56e:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <TWI_BufferTxRx>
 572:	80 81       	ld	r24, Z
 574:	80 ff       	sbrs	r24, 0
 576:	0d c0       	rjmp	.+26     	; 0x592 <TWIMaster_SendMsg+0x2c>
 578:	0f c0       	rjmp	.+30     	; 0x598 <TWIMaster_SendMsg+0x32>
 57a:	29 2f       	mov	r18, r25
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	df 01       	movw	r26, r30
 580:	a2 0f       	add	r26, r18
 582:	b3 1f       	adc	r27, r19
 584:	8c 91       	ld	r24, X
 586:	d9 01       	movw	r26, r18
 588:	a3 55       	subi	r26, 0x53	; 83
 58a:	be 4f       	sbci	r27, 0xFE	; 254
 58c:	8c 93       	st	X, r24
 58e:	9f 5f       	subi	r25, 0xFF	; 255
 590:	01 c0       	rjmp	.+2      	; 0x594 <TWIMaster_SendMsg+0x2e>
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	96 17       	cp	r25, r22
 596:	88 f3       	brcs	.-30     	; 0x57a <TWIMaster_SendMsg+0x14>
 598:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <TWI_StatusTxRx>
 59c:	85 ea       	ldi	r24, 0xA5	; 165
 59e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 5a2:	08 95       	ret

000005a4 <__vector_24>:
*	l'interruption envoie les données qui s'y trouvent. 
*
*/

ISR(TWI_vect)
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	8f 93       	push	r24
 5b4:	9f 93       	push	r25
 5b6:	ef 93       	push	r30
 5b8:	ff 93       	push	r31
	static uint8_t MsgPtr = 0;		// Pointeur de message (Static = 
								// valeur reste après l'interruption)
								
	switch (TWSR)
 5ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 5be:	88 32       	cpi	r24, 0x28	; 40
 5c0:	a1 f0       	breq	.+40     	; 0x5ea <__vector_24+0x46>
 5c2:	40 f4       	brcc	.+16     	; 0x5d4 <__vector_24+0x30>
 5c4:	80 31       	cpi	r24, 0x10	; 16
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <__vector_24+0x42>
 5c8:	88 31       	cpi	r24, 0x18	; 24
 5ca:	79 f0       	breq	.+30     	; 0x5ea <__vector_24+0x46>
 5cc:	88 30       	cpi	r24, 0x08	; 8
 5ce:	09 f0       	breq	.+2      	; 0x5d2 <__vector_24+0x2e>
 5d0:	58 c0       	rjmp	.+176    	; 0x682 <__vector_24+0xde>
 5d2:	09 c0       	rjmp	.+18     	; 0x5e6 <__vector_24+0x42>
 5d4:	80 35       	cpi	r24, 0x50	; 80
 5d6:	31 f1       	breq	.+76     	; 0x624 <__vector_24+0x80>
 5d8:	88 35       	cpi	r24, 0x58	; 88
 5da:	09 f4       	brne	.+2      	; 0x5de <__vector_24+0x3a>
 5dc:	41 c0       	rjmp	.+130    	; 0x660 <__vector_24+0xbc>
 5de:	80 34       	cpi	r24, 0x40	; 64
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <__vector_24+0x40>
 5e2:	4f c0       	rjmp	.+158    	; 0x682 <__vector_24+0xde>
 5e4:	2b c0       	rjmp	.+86     	; 0x63c <__vector_24+0x98>
	{
		case TWI_START:							// Si une condition de start ou de Repeated start
		case TWI_REP_START:						// a été envoyé, remet le pointeur à "0" et charge 
		MsgPtr = 0;								// l'adresse 
 5e6:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <MsgPtr.1690>
		case TWI_WR_ADR_ACK:					// Cette condition s'applique également si l'écriture
		case TWI_WR_DATA_ACK:					// a été notifiée par un ACK 
			if (MsgPtr < TWI_MsgSize)			// Si la totalité n'a pas été envoyée
 5ea:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <MsgPtr.1690>
 5ee:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <TWI_MsgSize>
 5f2:	e8 17       	cp	r30, r24
 5f4:	70 f4       	brcc	.+28     	; 0x612 <__vector_24+0x6e>
			{
				TWDR = TWI_BufferTxRx[MsgPtr++];
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	8e 0f       	add	r24, r30
 5fa:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <MsgPtr.1690>
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	e3 55       	subi	r30, 0x53	; 83
 602:	fe 4f       	sbci	r31, 0xFE	; 254
 604:	80 81       	ld	r24, Z
 606:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
				TWCR = (1<<TWEN)|                          // Active le périphérique TWI
 60a:	85 e8       	ldi	r24, 0x85	; 133
 60c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 610:	40 c0       	rjmp	.+128    	; 0x692 <__vector_24+0xee>
				(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|           //
				(0<<TWWC);                                 //
			}
			else								// Si la totalité du message a été envoyée								
			{
				TWI_StatusTxRx.S_StatusBit.TransmitOk = 0x01;	// Règle le bit de status (TX OK) 
 612:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <TWI_StatusTxRx>
 616:	81 60       	ori	r24, 0x01	; 1
 618:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <TWI_StatusTxRx>
				TWCR = (1<<TWEN)|									// Active le périphérique TWI
 61c:	84 e9       	ldi	r24, 0x94	; 148
 61e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 622:	37 c0       	rjmp	.+110    	; 0x692 <__vector_24+0xee>
				(0<<TWWC);											//
			}
		break;
		
    case TWI_RD_DATA_ACK:					// Si un byte a été reçu et ACK envoyé
		TWI_BufferTxRx[MsgPtr++] = TWDR;
 624:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <MsgPtr.1690>
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	8e 0f       	add	r24, r30
 62c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <MsgPtr.1690>
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 636:	e3 55       	subi	r30, 0x53	; 83
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	80 83       	st	Z, r24
		
    case TWI_RD_ADR_ACK:					// L'adresse et la notification ont été reçu par le SLAVE
    if (MsgPtr < (TWI_MsgSize-1) )          // Vérifie si il s'agit du dernier byte à lire 
 63c:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <MsgPtr.1690>
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <TWI_MsgSize>
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	28 17       	cp	r18, r24
 64c:	39 07       	cpc	r19, r25
 64e:	24 f4       	brge	.+8      	; 0x658 <__vector_24+0xb4>
    {
		// Si ce n'est pas le cas,
	    TWCR = (1<<TWEN)|                   // Met à Jour le Registre TWCR 
 650:	85 ec       	ldi	r24, 0xC5	; 197
 652:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 656:	1d c0       	rjmp	.+58     	; 0x692 <__vector_24+0xee>
	    (0<<TWWC);                          
    }
	else									     
    {
		// Si tout les bytes ont étés lus
	    TWCR = (1<<TWEN)|                          // Met à jour le TWCR
 658:	85 e8       	ldi	r24, 0x85	; 133
 65a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 65e:	19 c0       	rjmp	.+50     	; 0x692 <__vector_24+0xee>
	    (0<<TWWC);                                 //
    }
    break;
	
    case TWI_RD_DATA_NACK:								// Le dernier byte à été reçu (nack envoyé)
		TWI_BufferTxRx[MsgPtr] = TWDR;					// Sauve les données
 660:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <MsgPtr.1690>
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 66a:	e3 55       	subi	r30, 0x53	; 83
 66c:	fe 4f       	sbci	r31, 0xFE	; 254
 66e:	80 83       	st	Z, r24
		TWI_StatusTxRx.S_StatusBit.TransmitOk = 0x01;	// Flag de communication terminée correctement
 670:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <TWI_StatusTxRx>
 674:	81 60       	ori	r24, 0x01	; 1
 676:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <TWI_StatusTxRx>
		 
		TWCR = (1<<TWEN)|                          // Met à jour le registre de configuration TWI
 67a:	84 e9       	ldi	r24, 0x94	; 148
 67c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		(0<<TWIE)|(1<<TWINT)|                      // Désactive les interruptions et clear le Flag 
		(0<<TWEA)|(0<<TWSTA)|(1<<TWSTO)|           // Envoie la condition de stop 
		(0<<TWWC);                                 //
    break;
 680:	08 c0       	rjmp	.+16     	; 0x692 <__vector_24+0xee>
    case TWI_RD_ADR_NACK:		// Envoi de l'adresse + R, mais slave réponds avec NACK
    case TWI_WR_DATA_NACK:		// Envoi d'un byte, mais slave réponds avec NACK 
    case TWI_ERROR_BUS:			// Error sur le bus (Condition illegale (ex: Start-Stop)
    default:
		//TWI_state = TWSR;				// Sauve le registre de status et
		TWI_StatusTxRx.S_StatusBit.TransmitOk = 0x00;	// Efface le FLag de validation
 682:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <TWI_StatusTxRx>
 686:	8e 7f       	andi	r24, 0xFE	; 254
 688:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <TWI_StatusTxRx>
    
		// Reset TWI Interface
		TWCR = (1<<TWEN)|					// Mise à jour du registre de CONF
 68c:	84 e0       	ldi	r24, 0x04	; 4
 68e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		(0<<TWIE)|(0<<TWINT)|				// Désactive les interruptions
		(0<<TWEA)|(0<<TWSTA)|(0<<TWSTO)|	// Stoppe la communication en cours
		(0<<TWWC);							//		
	}
}
 692:	ff 91       	pop	r31
 694:	ef 91       	pop	r30
 696:	9f 91       	pop	r25
 698:	8f 91       	pop	r24
 69a:	3f 91       	pop	r19
 69c:	2f 91       	pop	r18
 69e:	0f 90       	pop	r0
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	0f 90       	pop	r0
 6a4:	1f 90       	pop	r1
 6a6:	18 95       	reti

000006a8 <_exit>:
 6a8:	f8 94       	cli

000006aa <__stop_program>:
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <__stop_program>
